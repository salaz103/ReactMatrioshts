/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var matrioshts = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,26],$V5=[1,27],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,24],$Vc=[1,23],$Vd=[1,25],$Ve=[5,15,18,21,22,29,30,31,33,35,40,43,44,45,53,56],$Vf=[1,52],$Vg=[1,46],$Vh=[1,45],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[2,14],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[17,20,25,47,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,102],$VJ=[17,20,25,47,70,71,73],$VK=[17,20,27,32,47],$VL=[20,47],$VM=[17,20,25,47,58,59,64,65,66,67,68,69,70,71,73],$VN=[17,20,25,47,58,59,60,61,62,64,65,66,67,68,69,70,71,73],$VO=[17,20,25,47,64,65,66,67,68,69,70,71,73],$VP=[1,143],$VQ=[1,144],$VR=[33,38,39],$VS=[15,18,21,22,29,30,31,35,40,43,44,45,53,56],$VT=[2,30],$VU=[2,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaracionlet":7,"asignacion":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"instruccionwhile":12,"imprimir":13,"declararfuncion":14,"IDENTIFICADOR":15,"RMASMAS":16,"RPUNTOCOMA":17,"RGRAFICAR":18,"RPARA":19,"RPARC":20,"RBREAK":21,"RCONTINUE":22,"instruccionreturn":23,"tipovariable":24,"RDOSPUNTOS":25,"tipodato":26,"RIGUAL":27,"expresion":28,"RLET":29,"RCONST":30,"RIF":31,"RLLAVEA":32,"RLLAVEC":33,"RELSE":34,"RSWITCH":35,"casos":36,"caso":37,"RCASE":38,"RDEFAULT":39,"RFOR":40,"ROF":41,"RIN":42,"RWHILE":43,"RDO":44,"RFUNCTION":45,"parametros":46,"RCOMA":47,"parametro":48,"RSTRING":49,"RNUMBER":50,"RBOOLEAN":51,"RVOID":52,"RCONSOLE":53,"RPUNTO":54,"RLOG":55,"RRETURN":56,"listaexpresiones":57,"RMAS":58,"RMENOS":59,"RPOR":60,"RDIVISION":61,"RMODULO":62,"REXPONENTE":63,"RMAYORQUE":64,"RMENORQUE":65,"RMAYORIGUALQUE":66,"RMENORIGUALQUE":67,"RIGUALQUE":68,"RDIFERENTEQUE":69,"RAND":70,"ROR":71,"RNOT":72,"RINTERROGACION":73,"NUM":74,"RTRUE":75,"RFALSE":76,"CADENACOMILLADOBLE":77,"CADENACOMILLASIMPLE":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"IDENTIFICADOR",16:"RMASMAS",17:"RPUNTOCOMA",18:"RGRAFICAR",19:"RPARA",20:"RPARC",21:"RBREAK",22:"RCONTINUE",25:"RDOSPUNTOS",27:"RIGUAL",29:"RLET",30:"RCONST",31:"RIF",32:"RLLAVEA",33:"RLLAVEC",34:"RELSE",35:"RSWITCH",38:"RCASE",39:"RDEFAULT",40:"RFOR",41:"ROF",42:"RIN",43:"RWHILE",44:"RDO",45:"RFUNCTION",47:"RCOMA",49:"RSTRING",50:"RNUMBER",51:"RBOOLEAN",52:"RVOID",53:"RCONSOLE",54:"RPUNTO",55:"RLOG",56:"RRETURN",58:"RMAS",59:"RMENOS",60:"RPOR",61:"RDIVISION",62:"RMODULO",63:"REXPONENTE",64:"RMAYORQUE",65:"RMENORQUE",66:"RMAYORIGUALQUE",67:"RMENORIGUALQUE",68:"RIGUALQUE",69:"RDIFERENTEQUE",70:"RAND",71:"ROR",72:"RNOT",73:"RINTERROGACION",74:"NUM",75:"RTRUE",76:"RFALSE",77:"CADENACOMILLADOBLE",78:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,4],[6,2],[6,2],[6,1],[7,7],[7,5],[7,5],[7,3],[24,1],[24,1],[8,4],[9,7],[9,11],[10,7],[36,2],[36,1],[37,6],[37,5],[11,15],[11,10],[11,10],[12,7],[12,8],[14,7],[14,10],[14,8],[46,3],[46,1],[48,3],[26,1],[26,1],[26,1],[26,1],[13,7],[23,2],[23,3],[57,3],[57,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,5],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2:
 $$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];  /*$$[$0-1].push($$[$0]); this.$=$$[$0-1];*/
break;
case 3:
this.$=nodobase.nuevonodo('INSTRUCCIONES',[$$[$0]],yylineno);  /*this.$=[$$[$0]]*/
break;
case 4: case 5:
this.$=$$[$0]
break;
case 10:
this.$=$$[$0];
break;
case 17:
this.$= nodobase.nuevonodo('DECLARACION_VARIABLE',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 18: case 19:
this.$= nodobase.nuevonodo('DECLARACION_VARIABLE',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 20:
this.$= nodobase.nuevonodo('DECLARACION_VARIABLE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 23:
this.$=nodobase.nuevonodo('ASIGNACION',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 36:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 42:
this.$= nodobase.nuevonodo('STRING',[$$[$0]],yylineno);
break;
case 43:
this.$= nodobase.nuevonodo('NUMBER',[$$[$0]],yylineno);
break;
case 44:
this.$= nodobase.nuevonodo('BOOLEAN',[$$[$0]],yylineno);
break;
case 45:
this.$= nodobase.nuevonodo('VOID',[$$[$0]],yylineno);
break;
case 46:
this.$= nodobase.nuevonodo('IMPRIMIR',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),{16:[1,30],27:[1,31]},{19:[1,32]},{17:[1,33]},{17:[1,34]},o($Ve,[2,16]),{15:[1,35]},{19:[1,36]},{19:[1,37]},{19:[1,38]},{19:[1,39]},{32:[1,40]},{54:[1,41]},{15:[1,42]},{15:$Vf,17:[1,43],19:$Vg,28:44,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:[2,21]},{15:[2,22]},{1:[2,1]},o($Ve,[2,2]),{17:[1,53]},{15:$Vf,19:$Vg,28:54,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{20:[1,55]},o($Ve,$Vn),o($Ve,[2,15]),{17:[1,58],25:[1,56],27:[1,57]},{15:$Vf,19:$Vg,28:59,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:60,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{24:61,29:$V4,30:$V5},{15:$Vf,19:$Vg,28:62,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{4:63,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{55:[1,64]},{19:[1,65]},o($Ve,[2,47]),{17:[1,66],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{15:$Vf,19:$Vg,28:82,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:83,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($VD,[2,68]),o($VD,[2,69]),o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,73],{19:[1,84]}),o($Ve,[2,12]),{17:[1,85],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{17:[1,86]},{26:87,49:$VE,50:$VF,51:$VG,52:$VH},{15:$Vf,19:$Vg,28:92,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($Ve,[2,20]),{20:[1,93],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{20:[1,94],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{15:[1,95]},{20:[1,96],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,97],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{19:[1,98]},{15:$VI,20:[1,99],46:100,48:101},o($Ve,[2,48]),{15:$Vf,19:$Vg,28:103,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:104,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:105,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:106,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:107,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:108,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:109,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:110,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:111,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:112,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:113,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:114,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:115,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:116,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:$Vf,19:$Vg,28:117,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($VJ,[2,65],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{20:[1,118],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{15:$Vf,19:$Vg,28:120,57:119,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($Ve,[2,23]),o($Ve,[2,13]),{17:[1,122],27:[1,121]},o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),{17:[1,123],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{32:[1,124]},{32:[1,125]},{27:[1,126],41:[1,127],42:[1,128]},{32:[1,129]},{43:[1,130]},{15:$Vf,19:$Vg,28:131,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{32:[1,132]},{20:[1,133],47:[1,134]},o($VL,[2,40]),{25:[1,135]},o($VM,[2,51],{60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VM,[2,52],{60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VN,[2,53],{63:$Vt}),o($VN,[2,54],{63:$Vt}),o($VN,[2,55],{63:$Vt}),o($VD,[2,56]),o($VO,[2,57],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VO,[2,58],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VO,[2,59],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VO,[2,60],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VO,[2,61],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VO,[2,62],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt}),o($VJ,[2,63],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o([17,20,25,47,71,73],[2,64],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA}),{25:[1,136],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},o($VD,[2,66]),{20:[1,137],47:[1,138]},o($VL,[2,50],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC}),{15:$Vf,19:$Vg,28:139,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($Ve,[2,19]),o($Ve,[2,18]),{4:140,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{36:141,37:142,38:$VP,39:$VQ},{15:$Vf,19:$Vg,28:145,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{15:[1,146]},{15:[1,147]},{4:148,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{19:[1,149]},{20:[1,150],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{4:151,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{25:[1,152],32:[1,153]},{15:$VI,48:154},{26:155,49:$VE,50:$VF,51:$VG,52:$VH},{15:$Vf,19:$Vg,28:156,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},o($VD,[2,74]),{15:$Vf,19:$Vg,28:157,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{17:[1,158],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,159],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{33:[1,160],37:161,38:$VP,39:$VQ},o($VR,[2,28]),{15:$Vf,19:$Vg,28:162,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{25:[1,163]},{17:[1,164],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{20:[1,165]},{20:[1,166]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,167],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{15:$Vf,19:$Vg,28:168,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{17:[1,169]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,170],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{26:171,49:$VE,50:$VF,51:$VG,52:$VH},{4:172,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},o($VL,[2,39]),o($VL,[2,41]),o([17,20,25,47,73],[2,67],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB}),o($VL,[2,49],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC}),o($Ve,[2,17]),o($Ve,[2,24],{34:[1,173]}),o($Ve,[2,26]),o($VR,[2,27]),{25:[1,174],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{4:175,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{15:$Vf,19:$Vg,28:176,72:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm},{32:[1,177]},{33:[1,178]},o($Ve,[2,34]),{20:[1,179],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},o($Ve,[2,46]),o($Ve,[2,36]),{32:[1,180]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,181],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{32:[1,182]},{4:183,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:[1,184],22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{17:[1,185],58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,73:$VC},{4:186,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},o($Ve,[2,35]),{4:188,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},o($Ve,[2,38]),{4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:[1,190],22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{17:[1,191]},{15:[1,192]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,193],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,194],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,195],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,196],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{17:[1,197]},o($VS,$Vn,{33:$VT,38:$VT,39:$VT}),{16:[1,198]},o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,37]),o($Ve,[2,25]),o($VS,$Vn,{33:$VU,38:$VU,39:$VU}),{20:[1,199]},{32:[1,200]},{4:201,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,29:$V4,30:$V5,31:$V6,33:[1,202],35:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,53:$Vc,56:$Vd},o($Ve,[2,31])],
defaultActions: {26:[2,21],27:[2,22],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const nodobase= require('../arbolBase/nodobase').nodobase;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 56;
break;
case 6:return 49;
break;
case 7:return 50;
break;
case 8:return 51;
break;
case 9:return 75;
break;
case 10:return 76;
break;
case 11:return 52;
break;
case 12:return 'RARRAY';
break;
case 13:return 18;
break;
case 14:return 45;
break;
case 15:return 53;
break;
case 16:return 55;
break;
case 17:return 29;
break;
case 18:return 30;
break;
case 19:return 70;
break;
case 20:return 71;
break;
case 21:return 72;
break;
case 22:return 31;
break;
case 23:return 34;
break;
case 24:return 43;
break;
case 25:return 44;
break;
case 26:return 35;
break;
case 27:return 38;
break;
case 28:return 39;
break;
case 29:return 40;
break;
case 30:return 42;
break;
case 31:return 41;  
break;
case 32:return 58;
break;
case 33:return 59;
break;
case 34:return 60;
break;
case 35:return 61;
break;
case 36:return 63;
break;
case 37:return 62;
break;
case 38:return 16;
break;
case 39:return 'RMENOSMENOS';
break;
case 40:return 64;
break;
case 41:return 65;
break;
case 42:return 66;
break;
case 43:return 67;
break;
case 44:return 68;
break;
case 45:return 69;
break;
case 46:return 73;
break;
case 47:return 25;
break;
case 48:return 54;
break;
case 49:return 47;
break;
case 50:return 17;
break;
case 51:return 27;
break;
case 52:return 'RCORCHETEA';
break;
case 53:return 'RCORCHETEC';
break;
case 54:return 32;
break;
case 55:return 33;
break;
case 56:return 19;
break;
case 57:return 20;
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77; 
break;
case 60:return 74;
break;
case 61:return 15;
break;
case 62:return 5;
break;
case 63: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:let)/,/^(?:const)/,/^(?:AND)/,/^(?:OR)/,/^(?:NOT)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\"]*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = matrioshts;
exports.Parser = matrioshts.Parser;
exports.parse = function () { return matrioshts.parse.apply(matrioshts, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}