/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var matrioshts = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,14],$V2=[1,13],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,19],$V7=[1,18],$V8=[5,15,16,22,24,28,30,34,36,38,45],$V9=[1,43],$Va=[1,37],$Vb=[1,36],$Vc=[1,38],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[17,21,26,40,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64],$VB=[19,21],$VC=[17,21,26,40,61,62,64],$VD=[17,21,26,40,49,50,55,56,57,58,59,60,61,62,64],$VE=[17,21,26,40,49,50,51,52,53,55,56,57,58,59,60,61,62,64],$VF=[17,21,26,40,55,56,57,58,59,60,61,62,64],$VG=[1,112],$VH=[1,113],$VI=[28,33,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaracionlet":7,"declaracionconst":8,"asignacion":9,"instruccionif":10,"instruccionswitch":11,"instruccionfor":12,"imprimir":13,"declararfuncion":14,"RLET":15,"IDENTIFICADOR":16,"RDOSPUNTOS":17,"tipodato":18,"RIGUAL":19,"expresion":20,"RPUNTOCOMA":21,"RCONST":22,"DOSPUNTOS":23,"RIF":24,"RPARA":25,"RPARC":26,"RLLAVEA":27,"RLLAVEC":28,"RELSE":29,"RSWITCH":30,"casos":31,"caso":32,"RCASE":33,"RBREAK":34,"RDEFAULT":35,"RFOR":36,"RMASMAS":37,"RFUNCTION":38,"PARABRE":39,"PARCIERRA":40,"RSTRING":41,"RNUMBER":42,"RBOOLEAN":43,"RVOID":44,"RCONSOLE":45,"PUNTO":46,"RLOG":47,"PUNTOCOMA":48,"RMAS":49,"RMENOS":50,"RPOR":51,"RDIVISION":52,"RMODULO":53,"REXPONENTE":54,"RMAYORQUE":55,"RMENORQUE":56,"RMAYORIGUALQUE":57,"RMENORIGUALQUE":58,"RIGUALQUE":59,"RDIFERENTEQUE":60,"RAND":61,"ROR":62,"RNOT":63,"RINTERROGACION":64,"NUM":65,"RTRUE":66,"RFALSE":67,"CADENACOMILLADOBLE":68,"CADENACOMILLASIMPLE":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"RLET",16:"IDENTIFICADOR",17:"RDOSPUNTOS",19:"RIGUAL",21:"RPUNTOCOMA",22:"RCONST",23:"DOSPUNTOS",24:"RIF",25:"RPARA",26:"RPARC",27:"RLLAVEA",28:"RLLAVEC",29:"RELSE",30:"RSWITCH",33:"RCASE",34:"RBREAK",35:"RDEFAULT",36:"RFOR",37:"RMASMAS",38:"RFUNCTION",39:"PARABRE",40:"PARCIERRA",41:"RSTRING",42:"RNUMBER",43:"RBOOLEAN",44:"RVOID",45:"RCONSOLE",46:"PUNTO",47:"RLOG",48:"PUNTOCOMA",49:"RMAS",50:"RMENOS",51:"RPOR",52:"RDIVISION",53:"RMODULO",54:"REXPONENTE",55:"RMAYORQUE",56:"RMENORQUE",57:"RMAYORIGUALQUE",58:"RMENORIGUALQUE",59:"RIGUALQUE",60:"RDIFERENTEQUE",61:"RAND",62:"ROR",63:"RNOT",64:"RINTERROGACION",65:"NUM",66:"RTRUE",67:"RFALSE",68:"CADENACOMILLADOBLE",69:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[8,7],[8,5],[9,4],[10,7],[10,11],[11,7],[31,2],[31,1],[32,6],[32,5],[12,14],[14,7],[18,1],[18,1],[18,1],[18,1],[13,7],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,5],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2:
 $$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];  /*$$[$0-1].push($$[$0]); this.$=$$[$0-1];*/
break;
case 3:
this.$=nodobase.nuevonodo('INSTRUCCIONES',[$$[$0]],yylineno);  /*this.$=[$$[$0]]*/
break;
case 4: case 5: case 6:
this.$=$$[$0]
break;
case 10:
this.$=$$[$0];
break;
case 12:
this.$= nodobase.nuevonodo('DECLARACIONLET',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 13: case 14:
this.$= nodobase.nuevonodo('DECLARACIONLET',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 15:
this.$= nodobase.nuevonodo('DECLARACIONLET',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 16:
this.$=nodobase.nuevonodo('DECLARACIONCONST',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 17:
this.$=nodobase.nuevonodo('DECLARACIONCONST',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 18:
this.$=nodobase.nuevonodo('ASIGNACION',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 27:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 28:
this.$= nodobase.nuevonodo('STRING',[$$[$0]],yylineno);
break;
case 29:
this.$= nodobase.nuevonodo('NUMBER',[$$[$0]],yylineno);
break;
case 30:
this.$= nodobase.nuevonodo('BOOLEAN',[$$[$0]],yylineno);
break;
case 31:
this.$= nodobase.nuevonodo('VOID',[$$[$0]],yylineno);
break;
case 32:
this.$= nodobase.nuevonodo('IMPRIMIR',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{1:[3]},{5:[1,20],6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),{16:[1,22]},{16:[1,23]},{19:[1,24]},{25:[1,25]},{25:[1,26]},{25:[1,27]},{46:[1,28]},{16:[1,29]},{1:[2,1]},o($V8,[2,2]),{17:[1,30],19:[1,31],21:[1,32]},{19:[1,34],23:[1,33]},{16:$V9,20:35,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:44,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:45,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:[1,46]},{47:[1,47]},{39:[1,48]},{18:49,41:$Vh,42:$Vi,43:$Vj,44:$Vk},{16:$V9,20:54,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($V8,[2,15]),{18:55,41:$Vh,42:$Vi,43:$Vj,44:$Vk},{16:$V9,20:56,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{21:[1,57],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{16:$V9,20:73,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:74,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($VA,[2,50]),o($VA,[2,51]),o($VA,[2,52]),o($VA,[2,53]),o($VA,[2,54]),o($VA,[2,55]),{26:[1,75],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{26:[1,76],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{19:[1,77]},{39:[1,78]},{40:[1,79]},{19:[1,80],21:[1,81]},o($VB,[2,28]),o($VB,[2,29]),o($VB,[2,30]),o($VB,[2,31]),{21:[1,82],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{19:[1,83]},{21:[1,84],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},o($V8,[2,18]),{16:$V9,20:85,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:86,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:87,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:88,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:89,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:90,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:91,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:92,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:93,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:94,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:95,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:96,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:97,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:98,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:99,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($VC,[2,47],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw}),{26:[1,100],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{27:[1,101]},{27:[1,102]},{16:$V9,20:103,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{16:$V9,20:104,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{27:[1,105]},{16:$V9,20:106,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($V8,[2,14]),o($V8,[2,13]),{16:$V9,20:107,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($V8,[2,17]),o($VD,[2,33],{51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VD,[2,34],{51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VE,[2,35],{54:$Vq}),o($VE,[2,36],{54:$Vq}),o($VE,[2,37],{54:$Vq}),o($VA,[2,38]),o($VF,[2,39],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VF,[2,40],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VF,[2,41],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VF,[2,42],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VF,[2,43],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VF,[2,44],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($VC,[2,45],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw}),o([17,21,26,40,62,64],[2,46],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx}),{17:[1,108],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},o($VA,[2,48]),{4:109,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{31:110,32:111,33:$VG,35:$VH},{21:[1,114],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{40:[1,115],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{4:116,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{21:[1,117],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{21:[1,118],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{16:$V9,20:119,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,28:[1,120],30:$V4,36:$V5,38:$V6,45:$V7},{28:[1,121],32:122,33:$VG,35:$VH},o($VI,[2,23]),{16:$V9,20:123,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{17:[1,124]},{16:$V9,20:125,25:$Va,63:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{48:[1,126]},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,28:[1,127],30:$V4,36:$V5,38:$V6,45:$V7},o($V8,[2,12]),o($V8,[2,16]),o([17,21,26,40,64],[2,49],{49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy}),o($V8,[2,19],{29:[1,128]}),o($V8,[2,21]),o($VI,[2,22]),{17:[1,129],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},{4:130,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{21:[1,131],49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,64:$Vz},o($V8,[2,32]),o($V8,[2,27]),{27:[1,132]},{4:133,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,34:[1,134],36:$V5,38:$V6,45:$V7},{16:[1,135]},{4:136,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,34:[1,137],36:$V5,38:$V6,45:$V7},{21:[1,138]},{37:[1,139]},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,28:[1,140],30:$V4,36:$V5,38:$V6,45:$V7},{21:[1,141]},o($VI,[2,25]),{26:[1,142]},o($V8,[2,20]),o($VI,[2,24]),{27:[1,143]},{4:144,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,30:$V4,36:$V5,38:$V6,45:$V7},{6:21,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,16:$V1,22:$V2,24:$V3,28:[1,145],30:$V4,36:$V5,38:$V6,45:$V7},o($V8,[2,26])],
defaultActions: {20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const nodobase= require('../arbolBase/nodobase').nodobase;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 41;
break;
case 1:return 42;
break;
case 2:return 43;
break;
case 3:return 66;
break;
case 4:return 67;
break;
case 5:return 44;
break;
case 6:return 'RARRAY';
break;
case 7:return 'RCORCHETEA';
break;
case 8:return 'RCORCHETEC';
break;
case 9:return 27;
break;
case 10:return 28;
break;
case 11:return 25;
break;
case 12:return 26;
break;
case 13:return 15;
break;
case 14:return 22;
break;
case 15:return 49;
break;
case 16:return 50;
break;
case 17:return 51;
break;
case 18:return 52;
break;
case 19:return 54;
break;
case 20:return 53;
break;
case 21:return 37;
break;
case 22:return 'RMENOSMENOS';
break;
case 23:return 55;
break;
case 24:return 56;
break;
case 25:return 57;
break;
case 26:return 58;
break;
case 27:return 59;
break;
case 28:return 60;
break;
case 29:return 61;
break;
case 30:return 62;
break;
case 31:return 63;
break;
case 32:return 64;
break;
case 33:return 17;
break;
case 34:return 24;
break;
case 35:return 29;
break;
case 36:return 'RWHILE';
break;
case 37:return 'RDO';
break;
case 38:return 30;
break;
case 39:return 33;
break;
case 40:return 35;
break;
case 41:return 36;
break;
case 42:return 'RIN';
break;
case 43:return 'ROF';  
break;
case 44:return 34;
break;
case 45:return 'RCONTINUE';
break;
case 46:return 'RRETURN';
break;
case 47:return 'RGRAFICAR';
break;
case 48:return 38;
break;
case 49:return 45;
break;
case 50:return 47;
break;
case 51:return 'RPUNTO';
break;
case 52:return 'RCOMA';
break;
case 53:return 21;
break;
case 54:return 19;
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 57:return 65;
break;
case 58:return 16;
break;
case 59:return 5;
break;
case 60: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 61:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:let)/,/^(?:const)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:AND)/,/^(?:OR)/,/^(?:NOT)/,/^(?:\?)/,/^(?::)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:'[^\"]*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = matrioshts;
exports.Parser = matrioshts.Parser;
exports.parse = function () { return matrioshts.parse.apply(matrioshts, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}