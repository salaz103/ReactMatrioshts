/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var matrioshts = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,19],$V4=[1,28],$V5=[1,29],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,26],$Vc=[1,25],$Vd=[1,27],$Ve=[5,18,21,22,24,38,39,40,42,45,48,49,50,53,54,55,62,65],$Vf=[1,41],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,42],$Vk=[1,57],$Vl=[1,63],$Vm=[1,55],$Vn=[1,56],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[8,29],$Vu=[2,26],$Vv=[1,67],$Vw=[1,68],$Vx=[8,20],$Vy=[1,85],$Vz=[1,84],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[8,20,29,31,36,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81],$VO=[1,105],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,112],$VT=[20,29,36],$VU=[1,124],$VV=[8,20,29,31,36,78,79,81],$VW=[8,20,29,33,35,41],$VX=[20,29],$VY=[8,20,29,31,36,66,67,72,73,74,75,76,77,78,79,81],$VZ=[8,20,29,31,36,66,67,68,69,70,72,73,74,75,76,77,78,79,81],$V_=[8,20,29,31,36,72,73,74,75,76,77,78,79,81],$V$=[1,166],$V01=[1,167],$V11=[42,48,49],$V21=[1,189];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"asignacion":9,"instruccionif":10,"instruccionswitch":11,"instruccionfor":12,"instruccionwhile":13,"imprimir":14,"declararfuncion":15,"llamarfuncion":16,"masmenos":17,"RGRAFICAR":18,"RPARA":19,"RPARC":20,"RBREAK":21,"RCONTINUE":22,"instruccionreturn":23,"IDENTIFICADOR":24,"RMASMAS":25,"RMENOSMENOS":26,"tipovariable":27,"listavariables":28,"RCOMA":29,"variable":30,"RDOSPUNTOS":31,"tipodato":32,"RIGUAL":33,"expresion":34,"RCORCHETEA":35,"RCORCHETEC":36,"listaexpresiones":37,"RLET":38,"RCONST":39,"RIF":40,"RLLAVEA":41,"RLLAVEC":42,"instruccionelse":43,"RELSE":44,"RSWITCH":45,"casos":46,"caso":47,"RCASE":48,"RDEFAULT":49,"RFOR":50,"ROF":51,"RIN":52,"RWHILE":53,"RDO":54,"RFUNCTION":55,"parametros":56,"parametro":57,"RSTRING":58,"RNUMBER":59,"RBOOLEAN":60,"RVOID":61,"RCONSOLE":62,"RPUNTO":63,"RLOG":64,"RRETURN":65,"RMENOS":66,"RMAS":67,"RPOR":68,"RDIVISION":69,"RMODULO":70,"REXPONENTE":71,"RMAYORQUE":72,"RMENORQUE":73,"RMAYORIGUALQUE":74,"RMENORIGUALQUE":75,"RIGUALQUE":76,"RDIFERENTEQUE":77,"RAND":78,"ROR":79,"RNOT":80,"RINTERROGACION":81,"NUM":82,"RTRUE":83,"RFALSE":84,"CADENACOMILLADOBLE":85,"CADENACOMILLASIMPLE":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",18:"RGRAFICAR",19:"RPARA",20:"RPARC",21:"RBREAK",22:"RCONTINUE",24:"IDENTIFICADOR",25:"RMASMAS",26:"RMENOSMENOS",29:"RCOMA",31:"RDOSPUNTOS",33:"RIGUAL",35:"RCORCHETEA",36:"RCORCHETEC",38:"RLET",39:"RCONST",40:"RIF",41:"RLLAVEA",42:"RLLAVEC",44:"RELSE",45:"RSWITCH",48:"RCASE",49:"RDEFAULT",50:"RFOR",51:"ROF",52:"RIN",53:"RWHILE",54:"RDO",55:"RFUNCTION",58:"RSTRING",59:"RNUMBER",60:"RBOOLEAN",61:"RVOID",62:"RCONSOLE",63:"RPUNTO",64:"RLOG",65:"RRETURN",66:"RMENOS",67:"RMAS",68:"RPOR",69:"RDIVISION",70:"RMODULO",71:"REXPONENTE",72:"RMAYORQUE",73:"RMENORQUE",74:"RMAYORIGUALQUE",75:"RMENORIGUALQUE",76:"RIGUALQUE",77:"RDIFERENTEQUE",78:"RAND",79:"ROR",80:"RNOT",81:"RINTERROGACION",82:"NUM",83:"RTRUE",84:"RFALSE",85:"CADENACOMILLADOBLE",86:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[17,2],[17,2],[7,2],[28,3],[28,1],[30,5],[30,3],[30,3],[30,1],[30,9],[30,5],[27,1],[27,1],[9,3],[10,7],[10,8],[43,2],[43,4],[11,7],[46,2],[46,1],[47,4],[47,3],[12,11],[12,11],[12,10],[12,10],[13,7],[13,8],[15,7],[15,10],[15,8],[15,9],[16,3],[16,4],[56,3],[56,1],[57,3],[32,1],[32,1],[32,1],[32,1],[14,7],[23,2],[23,3],[37,3],[37,1],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,5],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];  /*$$[$0-1].push($$[$0]); this.$=$$[$0-1];*/
break;
case 3:
this.$=nodobase.nuevonodo('INSTRUCCIONES',[$$[$0]],yylineno);  /*this.$=[$$[$0]]*/
break;
case 4: case 5:
this.$=nodobase.nuevonodo('IDECLARACIONES',[$$[$0-1],$$[$0]],yylineno);
break;
case 6: case 7: case 11: case 17:
this.$=$$[$0]
break;
case 8: case 9: case 10: case 89:
this.$=$$[$0];
break;
case 12:
this.$=nodobase.nuevonodo('LFUNCION',[$$[$0-1],$$[$0]],yylineno);
break;
case 13:
this.$=nodobase.nuevonodo('IMAS_MAS',[$$[$0-1],$$[$0]],yylineno);
break;
case 14:
this.$=nodobase.nuevonodo('GRAFICAR',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 15:
this.$=nodobase.nuevonodo('BREAK',[$$[$0-1],$$[$0]],yylineno);
break;
case 16:
this.$=nodobase.nuevonodo('CONTINUE',[$$[$0-1],$$[$0]],yylineno);
break;
case 18:
this.$=nodobase.nuevonodo('MAS_MAS',[$$[$0-1],$$[$0]],yylineno);
break;
case 19:
this.$=nodobase.nuevonodo('MENOS_MENOS',[$$[$0-1],$$[$0]],yylineno);
break;
case 20:
this.$=nodobase.nuevonodo('DECLARACION_VARIABLE',[$$[$0-1],$$[$0]],yylineno);
break;
case 21: case 53: case 63:
$$[$0-2].hijos.push($$[$0]); this.$=$$[$0-2];
break;
case 22:
this.$=nodobase.nuevonodo('LISTA_VARIABLES',[$$[$0]],yylineno);
break;
case 23:
this.$= nodobase.nuevonodo('VARIABLE_FULL',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 24:
this.$= nodobase.nuevonodo('VARIABLE_CON_EXPRESION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 25:
this.$= nodobase.nuevonodo('VARIABLE_SIN_EXPRESION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 26:
this.$= nodobase.nuevonodo('VARIABLE_ID',[$$[$0]],yylineno);
break;
case 27:
this.$= nodobase.nuevonodo('ARREGLO_COMPLETO',[$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 28:
this.$= nodobase.nuevonodo('ARREGLO',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 29:
this.$= nodobase.nuevonodo('LET',[$$[$0]],yylineno);
break;
case 30:
this.$= nodobase.nuevonodo('CONST',[$$[$0]],yylineno);
break;
case 31:
this.$=nodobase.nuevonodo('ASIGNACION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 32:
this.$=nodobase.nuevonodo('IF_SIMPLE',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 33:
this.$=nodobase.nuevonodo('IF_ELSE',[$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 34:
this.$=nodobase.nuevonodo('ELSE_IF',[$$[$0-1],$$[$0]],yylineno)
break;
case 35:
this.$=nodobase.nuevonodo('ELSE',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno)
break;
case 36:
this.$=nodobase.nuevonodo('SWITCH',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 37:
$$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];
break;
case 38:
this.$=nodobase.nuevonodo('LISTA_CASOS',[$$[$0]],yylineno);
break;
case 39:
this.$= nodobase.nuevonodo('CASE',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 40:
this.$= nodobase.nuevonodo('CASE_DEFAULT',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 41: case 42:
this.$= nodobase.nuevonodo('FOR',[$$[$0-10],$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 45:
this.$= nodobase.nuevonodo('WHILE',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 46:
this.$= nodobase.nuevonodo('DO_WHILE',[$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 47:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 48:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 49:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 50:
this.$= nodobase.nuevonodo('FUNCION',[$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 51:
this.$= nodobase.nuevonodo('LLAMADA_FUNCION1',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 52:
this.$= nodobase.nuevonodo('LLAMADA_FUNCION2',[$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 54:
this.$=nodobase.nuevonodo('LISTA_PARAMETROS',[$$[$0]],yylineno);
break;
case 55:
this.$= nodobase.nuevonodo('PARAMETRO',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 56:
this.$= nodobase.nuevonodo('STRING',[$$[$0]],yylineno);
break;
case 57:
this.$= nodobase.nuevonodo('NUMBER',[$$[$0]],yylineno);
break;
case 58:
this.$= nodobase.nuevonodo('BOOLEAN',[$$[$0]],yylineno);
break;
case 59:
this.$= nodobase.nuevonodo('VOID',[$$[$0]],yylineno);
break;
case 60:
this.$= nodobase.nuevonodo('IMPRIMIR',[$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 61:
this.$= nodobase.nuevonodo('RETURN',[$$[$0-1],$$[$0]],yylineno);
break;
case 62:
this.$= nodobase.nuevonodo('RETURN',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 64:
this.$=nodobase.nuevonodo('LISTA_EXPRESIONES',[$$[$0]],yylineno);
break;
case 65:
this.$= nodobase.nuevonodo('NEGATIVO',[$$[$0-1],$$[$0]],yylineno);
break;
case 66:
this.$= nodobase.nuevonodo('MAS',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 67:
this.$= nodobase.nuevonodo('MENOS',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 68:
this.$= nodobase.nuevonodo('POR',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 69:
this.$= nodobase.nuevonodo('DIVISON',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 70:
this.$= nodobase.nuevonodo('MODULO',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 71:
this.$= nodobase.nuevonodo('EXPONENTE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 72:
this.$= nodobase.nuevonodo('MAYORQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 73:
this.$= nodobase.nuevonodo('MENORQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 74:
this.$= nodobase.nuevonodo('MAYORIGUALQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 75:
this.$= nodobase.nuevonodo('MENORIGUALQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 76:
this.$= nodobase.nuevonodo('IGUALQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 77:
this.$= nodobase.nuevonodo('DIFERENTEQUE',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 78:
this.$= nodobase.nuevonodo('AND',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 79:
this.$= nodobase.nuevonodo('OR',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 80:
this.$= nodobase.nuevonodo('NOT',[$$[$0-1],$$[$0]],yylineno);
break;
case 81:
this.$= nodobase.nuevonodo('PAREXPRESION',[$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 82:
this.$= nodobase.nuevonodo('TERNARIO',[$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]],yylineno);
break;
case 83:
this.$= nodobase.nuevonodo('NUMERO',[$$[$0]],yylineno);
break;
case 84:
this.$= nodobase.nuevonodo('TRUE',[$$[$0]],yylineno);
break;
case 85:
this.$= nodobase.nuevonodo('FALSE',[$$[$0]],yylineno);
break;
case 86:
this.$= nodobase.nuevonodo('COMILLA_DOBLE',[$$[$0]],yylineno);
break;
case 87:
this.$= nodobase.nuevonodo('COMILLA_SIMPLE',[$$[$0]],yylineno);
break;
case 88:
this.$= nodobase.nuevonodo('IDENTIFICADOR',[$$[$0]],yylineno);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{1:[3]},{5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($Ve,[2,3]),{8:[1,32]},{8:[1,33]},o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),{8:[1,34]},{8:[1,35]},{19:[1,36]},{8:[1,37]},{8:[1,38]},o($Ve,[2,17]),{24:$Vf,28:39,30:40},{19:$Vg,25:$Vh,26:$Vi,33:$Vj},{19:[1,46]},{19:[1,47]},{19:[1,48]},{19:[1,49]},{41:[1,50]},{63:[1,51]},{24:[1,52]},{8:[1,53],16:64,19:$Vk,24:$Vl,34:54,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{24:[2,29]},{24:[2,30]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,12]),o($Ve,[2,13]),{20:[1,65]},o($Ve,[2,15]),o($Ve,[2,16]),{8:[2,20],29:[1,66]},o($Vt,[2,22]),o($Vt,$Vu,{31:$Vv,33:$Vw}),{16:64,19:$Vk,24:$Vl,34:69,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,20:[1,70],24:$Vl,34:72,37:71,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($Vx,[2,18]),o($Vx,[2,19]),{16:64,19:$Vk,24:$Vl,34:73,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:74,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{7:75,9:76,24:[1,78],27:77,38:$V4,39:$V5},{16:64,19:$Vk,24:$Vl,34:79,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{4:80,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{64:[1,81]},{19:[1,82]},o($Ve,[2,61]),{8:[1,83],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{16:64,19:$Vk,24:$Vl,34:99,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:100,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:101,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88],{19:$Vg}),o($VN,[2,89]),{8:[1,102]},{24:$Vf,30:103},{32:104,58:$VO,59:$VP,60:$VQ,61:$VR},{16:64,19:$Vk,24:$Vl,34:109,35:[1,110],66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{8:[2,31],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},o($VN,[2,51]),{20:[1,111],29:$VS},o($VT,[2,64],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM}),{20:[1,113],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{20:[1,114],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{8:[1,115]},{8:[1,116]},{24:[1,117],28:39,30:40},{33:$Vj},{20:[1,118],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,119],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{19:[1,120]},{20:[1,121],24:$VU,56:122,57:123},o($Ve,[2,62]),{16:64,19:$Vk,24:$Vl,34:125,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:126,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:127,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:128,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:129,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:130,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:131,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:132,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:133,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:134,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:135,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:136,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:137,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:138,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:139,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($VN,[2,65]),o($VV,[2,80],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),{20:[1,140],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},o($Ve,[2,14]),o($Vt,[2,21]),o($Vt,[2,25],{33:[1,141],35:[1,142]}),o($VW,[2,56]),o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,59]),o($Vt,[2,24],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM}),{16:64,19:$Vk,24:$Vl,34:72,37:143,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($VN,[2,52]),{16:64,19:$Vk,24:$Vl,34:144,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{41:[1,145]},{41:[1,146]},{16:64,19:$Vk,24:$Vl,34:147,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{16:64,19:$Vk,24:$Vl,34:148,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($Vt,$Vu,{31:$Vv,33:$Vw,51:[1,149],52:[1,150]}),{41:[1,151]},{53:[1,152]},{16:64,19:$Vk,24:$Vl,34:153,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{31:[1,155],41:[1,154]},{20:[1,156],29:[1,157]},o($VX,[2,54]),{31:[1,158]},o($VY,[2,66],{68:$VA,69:$VB,70:$VC,71:$VD}),o($VY,[2,67],{68:$VA,69:$VB,70:$VC,71:$VD}),o($VZ,[2,68],{71:$VD}),o($VZ,[2,69],{71:$VD}),o($VZ,[2,70],{71:$VD}),o($VN,[2,71]),o($V_,[2,72],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V_,[2,73],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V_,[2,74],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V_,[2,75],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V_,[2,76],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V_,[2,77],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,78],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),o([8,20,29,31,36,79,81],[2,79],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK}),{31:[1,159],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},o($VN,[2,81]),{16:64,19:$Vk,24:$Vl,34:160,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{36:[1,161]},{29:$VS,36:[1,162]},o($VT,[2,63],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM}),{4:163,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{46:164,47:165,48:$V$,49:$V01},{8:[1,168],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{8:[1,169],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{24:[1,170]},{24:[1,171]},{4:172,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{19:[1,173]},{20:[1,174],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{4:175,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{32:176,58:$VO,59:$VP,60:$VQ,61:$VR},{31:[1,177],41:[1,178]},{24:$VU,57:179},{32:180,58:$VO,59:$VP,60:$VQ,61:$VR},{16:64,19:$Vk,24:$Vl,34:181,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($Vt,[2,23],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM}),{33:[1,182]},o($Vt,[2,28]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,183],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{42:[1,184],47:185,48:$V$,49:$V01},o($V11,[2,38]),{16:64,19:$Vk,24:$Vl,34:186,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{31:[1,187]},{17:188,24:$V21},{17:190,24:$V21},{20:[1,191]},{20:[1,192]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,193],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{16:64,19:$Vk,24:$Vl,34:194,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},{8:[1,195]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,196],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{41:[1,197]},{32:198,58:$VO,59:$VP,60:$VQ,61:$VR},{4:199,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($VX,[2,53]),o($VX,[2,55]),o([8,20,29,31,36,81],[2,82],{66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{35:[1,200]},o($Ve,[2,32],{43:201,44:[1,202]}),o($Ve,[2,36]),o($V11,[2,37]),{31:[1,203],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},{4:204,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{20:[1,205]},{25:$Vh,26:$Vi},{20:[1,206]},{41:[1,207]},{42:[1,208]},o($Ve,[2,45]),{20:[1,209],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,81:$VM},o($Ve,[2,60]),o($Ve,[2,47]),{4:210,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{41:[1,211]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,212],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{16:64,19:$Vk,24:$Vl,34:72,37:213,66:$Vm,80:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs},o($Ve,[2,33]),{10:214,40:$V6,41:[1,215]},{4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($V11,[2,40],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:17,27:18,6:31,18:$V0,21:$V1,22:$V2,24:$V3,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd}),{41:[1,217]},{41:[1,218]},{4:219,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{4:220,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($Ve,[2,46]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,221],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{4:222,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($Ve,[2,49]),{29:$VS,36:[1,223]},o($Ve,[2,34]),{4:224,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($V11,[2,39],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,23:17,27:18,6:31,18:$V0,21:$V1,22:$V2,24:$V3,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd}),{4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{4:226,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,227],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,228],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($Ve,[2,50]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,229],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($Vt,[2,27]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,230],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,231],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,21:$V1,22:$V2,23:17,24:$V3,27:18,38:$V4,39:$V5,40:$V6,42:[1,232],45:$V7,50:$V8,53:$V9,54:$Va,55:$Vb,62:$Vc,65:$Vd},o($Ve,[2,43]),o($Ve,[2,44]),o($Ve,[2,48]),o($Ve,[2,35]),o($Ve,[2,41]),o($Ve,[2,42])],
defaultActions: {28:[2,29],29:[2,30],30:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const nodobase= require('../arbolBase/nodobase').nodobase;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 65;
break;
case 6:return 58;
break;
case 7:return 59;
break;
case 8:return 60;
break;
case 9:return 83;
break;
case 10:return 84;
break;
case 11:return 61;
break;
case 12:return 'RARRAY';
break;
case 13:return 18;
break;
case 14:return 55;
break;
case 15:return 62;
break;
case 16:return 64;
break;
case 17:return 38;
break;
case 18:return 39;
break;
case 19:return 40;
break;
case 20:return 44;
break;
case 21:return 53;
break;
case 22:return 54;
break;
case 23:return 45;
break;
case 24:return 48;
break;
case 25:return 49;
break;
case 26:return 50;
break;
case 27:return 52;
break;
case 28:return 51;  
break;
case 29:return 67;
break;
case 30:return 66;
break;
case 31:return 68;
break;
case 32:return 69;
break;
case 33:return 71;
break;
case 34:return 70;
break;
case 35:return 25;
break;
case 36:return 26;
break;
case 37:return 72;
break;
case 38:return 73;
break;
case 39:return 74;
break;
case 40:return 75;
break;
case 41:return 76;
break;
case 42:return 77;
break;
case 43:return 78;
break;
case 44:return 79;
break;
case 45:return 80;
break;
case 46:return 81;
break;
case 47:return 31;
break;
case 48:return 63;
break;
case 49:return 29;
break;
case 50:return 8;
break;
case 51:return 33;
break;
case 52:return 35;
break;
case 53:return 36;
break;
case 54:return 41;
break;
case 55:return 42;
break;
case 56:return 19;
break;
case 57:return 20;
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 86; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85; 
break;
case 60:return 82;
break;
case 61:return 24;
break;
case 62:return 5;
break;
case 63: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = matrioshts;
exports.Parser = matrioshts.Parser;
exports.parse = function () { return matrioshts.parse.apply(matrioshts, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}