/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,26],$V5=[1,27],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,24],$Vc=[1,23],$Vd=[1,25],$Ve=[5,15,18,21,22,32,33,34,36,39,44,47,48,49,56,59],$Vf=[1,37],$Vg=[1,54],$Vh=[1,48],$Vi=[1,47],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[2,14],$Vp=[17,26],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[17,20,26,28,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,106],$VL=[17,20,26,28,73,74,76],$VM=[17,20,26,30,35],$VN=[20,26],$VO=[17,20,26,28,61,62,67,68,69,70,71,72,73,74,76],$VP=[17,20,26,28,61,62,63,64,65,67,68,69,70,71,72,73,74,76],$VQ=[17,20,26,28,67,68,69,70,71,72,73,74,76],$VR=[1,146],$VS=[1,147],$VT=[36,42,43],$VU=[15,18,21,22,32,33,34,39,44,47,48,49,56,59],$VV=[2,35],$VW=[2,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"asignacion":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"instruccionwhile":12,"imprimir":13,"declararfuncion":14,"IDENTIFICADOR":15,"RMASMAS":16,"RPUNTOCOMA":17,"RGRAFICAR":18,"RPARA":19,"RPARC":20,"RBREAK":21,"RCONTINUE":22,"instruccionreturn":23,"tipovariable":24,"listavariables":25,"RCOMA":26,"variable":27,"RDOSPUNTOS":28,"tipodato":29,"RIGUAL":30,"expresion":31,"RLET":32,"RCONST":33,"RIF":34,"RLLAVEA":35,"RLLAVEC":36,"instruccionelse":37,"RELSE":38,"RSWITCH":39,"casos":40,"caso":41,"RCASE":42,"RDEFAULT":43,"RFOR":44,"ROF":45,"RIN":46,"RWHILE":47,"RDO":48,"RFUNCTION":49,"parametros":50,"parametro":51,"RSTRING":52,"RNUMBER":53,"RBOOLEAN":54,"RVOID":55,"RCONSOLE":56,"RPUNTO":57,"RLOG":58,"RRETURN":59,"listaexpresiones":60,"RMAS":61,"RMENOS":62,"RPOR":63,"RDIVISION":64,"RMODULO":65,"REXPONENTE":66,"RMAYORQUE":67,"RMENORQUE":68,"RMAYORIGUALQUE":69,"RMENORIGUALQUE":70,"RIGUALQUE":71,"RDIFERENTEQUE":72,"RAND":73,"ROR":74,"RNOT":75,"RINTERROGACION":76,"NUM":77,"RTRUE":78,"RFALSE":79,"CADENACOMILLADOBLE":80,"CADENACOMILLASIMPLE":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"IDENTIFICADOR",16:"RMASMAS",17:"RPUNTOCOMA",18:"RGRAFICAR",19:"RPARA",20:"RPARC",21:"RBREAK",22:"RCONTINUE",26:"RCOMA",28:"RDOSPUNTOS",30:"RIGUAL",32:"RLET",33:"RCONST",34:"RIF",35:"RLLAVEA",36:"RLLAVEC",38:"RELSE",39:"RSWITCH",42:"RCASE",43:"RDEFAULT",44:"RFOR",45:"ROF",46:"RIN",47:"RWHILE",48:"RDO",49:"RFUNCTION",52:"RSTRING",53:"RNUMBER",54:"RBOOLEAN",55:"RVOID",56:"RCONSOLE",57:"RPUNTO",58:"RLOG",59:"RRETURN",61:"RMAS",62:"RMENOS",63:"RPOR",64:"RDIVISION",65:"RMODULO",66:"REXPONENTE",67:"RMAYORQUE",68:"RMENORQUE",69:"RMAYORIGUALQUE",70:"RMENORIGUALQUE",71:"RIGUALQUE",72:"RDIFERENTEQUE",73:"RAND",74:"ROR",75:"RNOT",76:"RINTERROGACION",77:"NUM",78:"RTRUE",79:"RFALSE",80:"CADENACOMILLADOBLE",81:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,4],[6,2],[6,2],[6,1],[7,3],[25,3],[25,1],[27,5],[27,3],[27,3],[27,1],[24,1],[24,1],[8,4],[9,7],[9,8],[37,2],[37,4],[10,7],[40,2],[40,1],[41,6],[41,5],[11,15],[11,10],[11,10],[12,7],[12,8],[14,7],[14,10],[14,8],[14,9],[50,3],[50,1],[51,3],[29,1],[29,1],[29,1],[29,1],[13,7],[23,2],[23,3],[60,3],[60,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,5],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 52:
this.$=new imprimir.imprimir($$[$0-2])
break;
case 75:
this.$=new valorLogico.valorLogico("TRUE",tipo_valor.BOOLEAN)
break;
case 76:
this.$=new valorLogico.valorLogico("FALSE",tipo_valor.BOOLEAN)
break;
case 77: case 78:
this.$=new cadena.cadena($$[$0],tipo_valor.STRING)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),{16:[1,30],30:[1,31]},{19:[1,32]},{17:[1,33]},{17:[1,34]},o($Ve,[2,16]),{15:$Vf,25:35,27:36},{19:[1,38]},{19:[1,39]},{19:[1,40]},{19:[1,41]},{35:[1,42]},{57:[1,43]},{15:[1,44]},{15:$Vg,17:[1,45],19:$Vh,31:46,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:[2,24]},{15:[2,25]},{1:[2,1]},o($Ve,[2,2]),{17:[1,55]},{15:$Vg,19:$Vh,31:56,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{20:[1,57]},o($Ve,$Vo),o($Ve,[2,15]),{17:[1,58],26:[1,59]},o($Vp,[2,19]),o($Vp,[2,23],{28:[1,60],30:[1,61]}),{15:$Vg,19:$Vh,31:62,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:63,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{24:64,32:$V4,33:$V5},{15:$Vg,19:$Vh,31:65,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{4:66,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{58:[1,67]},{19:[1,68]},o($Ve,[2,53]),{17:[1,69],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{15:$Vg,19:$Vh,31:85,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:86,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},o($VF,[2,74]),o($VF,[2,75]),o($VF,[2,76]),o($VF,[2,77]),o($VF,[2,78]),o($VF,[2,79],{19:[1,87]}),o($Ve,[2,12]),{17:[1,88],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{17:[1,89]},o($Ve,[2,17]),{15:$Vf,27:90},{29:91,52:$VG,53:$VH,54:$VI,55:$VJ},{15:$Vg,19:$Vh,31:96,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{20:[1,97],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{20:[1,98],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{15:[1,99]},{20:[1,100],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,101],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{19:[1,102]},{15:$VK,20:[1,103],50:104,51:105},o($Ve,[2,54]),{15:$Vg,19:$Vh,31:107,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:108,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:109,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:110,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:111,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:112,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:113,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:114,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:115,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:116,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:117,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:118,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:119,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:120,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:$Vg,19:$Vh,31:121,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},o($VL,[2,71],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),{20:[1,122],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{15:$Vg,19:$Vh,31:124,60:123,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},o($Ve,[2,26]),o($Ve,[2,13]),o($Vp,[2,18]),o($Vp,[2,22],{30:[1,125]}),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,50]),o($VM,[2,51]),o($Vp,[2,21],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE}),{35:[1,126]},{35:[1,127]},{30:[1,128],45:[1,129],46:[1,130]},{35:[1,131]},{47:[1,132]},{15:$Vg,19:$Vh,31:133,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{28:[1,135],35:[1,134]},{20:[1,136],26:[1,137]},o($VN,[2,46]),{28:[1,138]},o($VO,[2,57],{63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VO,[2,58],{63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VP,[2,59],{66:$Vv}),o($VP,[2,60],{66:$Vv}),o($VP,[2,61],{66:$Vv}),o($VF,[2,62]),o($VQ,[2,63],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VQ,[2,64],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VQ,[2,65],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VQ,[2,66],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VQ,[2,67],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VQ,[2,68],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VL,[2,69],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB}),o([17,20,26,28,74,76],[2,70],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC}),{28:[1,139],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},o($VF,[2,72]),{20:[1,140],26:[1,141]},o($VN,[2,56],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE}),{15:$Vg,19:$Vh,31:142,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{40:144,41:145,42:$VR,43:$VS},{15:$Vg,19:$Vh,31:148,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{15:[1,149]},{15:[1,150]},{4:151,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{19:[1,152]},{20:[1,153],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{4:154,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{29:155,52:$VG,53:$VH,54:$VI,55:$VJ},{28:[1,156],35:[1,157]},{15:$VK,51:158},{29:159,52:$VG,53:$VH,54:$VI,55:$VJ},{15:$Vg,19:$Vh,31:160,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},o($VF,[2,80]),{15:$Vg,19:$Vh,31:161,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},o($Vp,[2,20],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE}),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,162],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{36:[1,163],41:164,42:$VR,43:$VS},o($VT,[2,33]),{15:$Vg,19:$Vh,31:165,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{28:[1,166]},{17:[1,167],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{20:[1,168]},{20:[1,169]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,170],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{15:$Vg,19:$Vh,31:171,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{17:[1,172]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,173],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{35:[1,174]},{29:175,52:$VG,53:$VH,54:$VI,55:$VJ},{4:176,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($VN,[2,45]),o($VN,[2,47]),o([17,20,26,28,76],[2,73],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD}),o($VN,[2,55],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE}),o($Ve,[2,27],{37:177,38:[1,178]}),o($Ve,[2,31]),o($VT,[2,32]),{28:[1,179],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{15:$Vg,19:$Vh,31:181,75:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn},{35:[1,182]},{36:[1,183]},o($Ve,[2,39]),{20:[1,184],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},o($Ve,[2,52]),o($Ve,[2,41]),{4:185,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{35:[1,186]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,187],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,28]),{9:188,34:$V6,35:[1,189]},{4:190,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:[1,191],22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{17:[1,192],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,76:$VE},{4:193,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{4:194,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,40]),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,195],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,43]),o($Ve,[2,29]),{4:197,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:[1,198],22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{17:[1,199]},{15:[1,200]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,201],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,202],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,44]),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,203],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,204],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{17:[1,205]},o($VU,$Vo,{36:$VV,42:$VV,43:$VV}),{16:[1,206]},o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,42]),o($Ve,[2,30]),o($VU,$Vo,{36:$VW,42:$VW,43:$VW}),{20:[1,207]},{35:[1,208]},{4:209,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,18:$V1,21:$V2,22:$V3,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,210],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,36])],
defaultActions: {26:[2,24],27:[2,25],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //EXPRESIONES
const cadena= require('../ArchivosTS/expresiones/cadena');
const valorLogico= require('../ArchivosTS/expresiones/valorLogico');

  //INSTRUCCIONES
const imprimir= require('../ArchivosTS/instrucciones/imprimir');

  //OTROS
const tipo_valor= require('../ArchivosTS/entorno/tipo').tipo_valor;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 59;
break;
case 6:return 52;
break;
case 7:return 53;
break;
case 8:return 54;
break;
case 9:return 78;
break;
case 10:return 79;
break;
case 11:return 55;
break;
case 12:return 'RARRAY';
break;
case 13:return 18;
break;
case 14:return 49;
break;
case 15:return 56;
break;
case 16:return 58;
break;
case 17:return 32;
break;
case 18:return 33;
break;
case 19:return 34;
break;
case 20:return 38;
break;
case 21:return 47;
break;
case 22:return 48;
break;
case 23:return 39;
break;
case 24:return 42;
break;
case 25:return 43;
break;
case 26:return 44;
break;
case 27:return 46;
break;
case 28:return 45;  
break;
case 29:return 61;
break;
case 30:return 62;
break;
case 31:return 63;
break;
case 32:return 64;
break;
case 33:return 66;
break;
case 34:return 65;
break;
case 35:return 16;
break;
case 36:return 'RMENOSMENOS';
break;
case 37:return 67;
break;
case 38:return 68;
break;
case 39:return 69;
break;
case 40:return 70;
break;
case 41:return 71;
break;
case 42:return 72;
break;
case 43:return 73;
break;
case 44:return 74;
break;
case 45:return 75;
break;
case 46:return 76;
break;
case 47:return 28;
break;
case 48:return 57;
break;
case 49:return 26;
break;
case 50:return 17;
break;
case 51:return 30;
break;
case 52:return 'RCORCHETEA';
break;
case 53:return 'RCORCHETEC';
break;
case 54:return 35;
break;
case 55:return 36;
break;
case 56:return 19;
break;
case 57:return 20;
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 60:return 77;
break;
case 61:return 15;
break;
case 62:return 5;
break;
case 63: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\"]*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}