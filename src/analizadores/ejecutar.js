/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,27],$V5=[1,29],$V6=[1,30],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,26],$Vd=[1,25],$Ve=[1,28],$Vf=[5,12,18,21,22,25,39,40,41,43,47,50,51,52,55,56,57,64,67],$Vg=[1,42],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,59],$Vm=[1,57],$Vn=[1,56],$Vo=[1,58],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[8,30],$Vv=[2,27],$Vw=[1,68],$Vx=[1,69],$Vy=[8,20],$Vz=[1,86],$VA=[1,85],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[8,20,30,32,37,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83],$VP=[1,108],$VQ=[1,109],$VR=[1,110],$VS=[1,111],$VT=[1,125],$VU=[1,127],$VV=[20,30,37],$VW=[8,20,30,32,37,80,81,83],$VX=[8,20,30,34,36,42],$VY=[20,30],$VZ=[8,20,30,32,37,68,69,74,75,76,77,78,79,80,81,83],$V_=[8,20,30,32,37,68,69,70,71,72,74,75,76,77,78,79,80,81,83],$V$=[8,20,30,32,37,74,75,76,77,78,79,80,81,83],$V01=[1,169],$V11=[1,170],$V21=[43,50,51],$V31=[1,192],$V41=[1,205];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"declaracionarreglo":12,"instruccionwhile":13,"imprimir":14,"declararfuncion":15,"llamarfuncion":16,"masmenos":17,"RGRAFICAR":18,"RPARA":19,"RPARC":20,"RBREAK":21,"RCONTINUE":22,"instruccionreturn":23,"asignacion":24,"IDENTIFICADOR":25,"RMASMAS":26,"RMENOSMENOS":27,"tipovariable":28,"listavariables":29,"RCOMA":30,"variable":31,"RDOSPUNTOS":32,"tipodato":33,"RIGUAL":34,"expresion":35,"RCORCHETEA":36,"RCORCHETEC":37,"listaexpresiones":38,"RLET":39,"RCONST":40,"RIF":41,"RLLAVEA":42,"RLLAVEC":43,"instruccionelseif":44,"RELSE":45,"instruccionelse":46,"RSWITCH":47,"casos":48,"caso":49,"RCASE":50,"RDEFAULT":51,"RFOR":52,"ROF":53,"RIN":54,"RWHILE":55,"RDO":56,"RFUNCTION":57,"parametros":58,"parametro":59,"RSTRING":60,"RNUMBER":61,"RBOOLEAN":62,"RVOID":63,"RCONSOLE":64,"RPUNTO":65,"RLOG":66,"RRETURN":67,"RMENOS":68,"RMAS":69,"RPOR":70,"RDIVISION":71,"RMODULO":72,"REXPONENTE":73,"RMAYORQUE":74,"RMENORQUE":75,"RMAYORIGUALQUE":76,"RMENORIGUALQUE":77,"RIGUALQUE":78,"RDIFERENTEQUE":79,"RAND":80,"ROR":81,"RNOT":82,"RINTERROGACION":83,"NUM":84,"RTRUE":85,"RFALSE":86,"CADENACOMILLADOBLE":87,"CADENACOMILLASIMPLE":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",12:"declaracionarreglo",18:"RGRAFICAR",19:"RPARA",20:"RPARC",21:"RBREAK",22:"RCONTINUE",25:"IDENTIFICADOR",26:"RMASMAS",27:"RMENOSMENOS",30:"RCOMA",32:"RDOSPUNTOS",34:"RIGUAL",36:"RCORCHETEA",37:"RCORCHETEC",39:"RLET",40:"RCONST",41:"RIF",42:"RLLAVEA",43:"RLLAVEC",45:"RELSE",47:"RSWITCH",50:"RCASE",51:"RDEFAULT",52:"RFOR",53:"ROF",54:"RIN",55:"RWHILE",56:"RDO",57:"RFUNCTION",60:"RSTRING",61:"RNUMBER",62:"RBOOLEAN",63:"RVOID",64:"RCONSOLE",65:"RPUNTO",66:"RLOG",67:"RRETURN",68:"RMENOS",69:"RMAS",70:"RPOR",71:"RDIVISION",72:"RMODULO",73:"REXPONENTE",74:"RMAYORQUE",75:"RMENORQUE",76:"RMAYORIGUALQUE",77:"RMENORIGUALQUE",78:"RIGUALQUE",79:"RDIFERENTEQUE",80:"RAND",81:"ROR",82:"RNOT",83:"RINTERROGACION",84:"NUM",85:"RTRUE",86:"RFALSE",87:"CADENACOMILLADOBLE",88:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[6,2],[17,2],[17,2],[7,2],[29,3],[29,1],[31,5],[31,3],[31,3],[31,1],[31,9],[31,5],[28,1],[28,1],[24,3],[9,7],[9,8],[44,8],[44,9],[44,1],[46,4],[10,7],[48,2],[48,1],[49,4],[49,3],[11,11],[11,11],[11,10],[11,10],[13,7],[13,8],[15,7],[15,10],[15,8],[15,9],[16,3],[16,4],[58,3],[58,1],[59,3],[33,1],[33,1],[33,1],[33,1],[14,7],[23,2],[23,3],[38,3],[38,1],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,5],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 40:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 23: case 41: case 57:
this.$=[$$[$0]];
break;
case 4: case 12: case 13: case 18: case 86:
this.$=$$[$0-1];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 17: case 37: case 94:
this.$=$$[$0];
break;
case 14:
this.$= new graficar.graficar();
break;
case 15:
this.$= new instruccionbreak.instruccionbreak(tipo_instruccion.BREAK);
break;
case 16:
this.$= new instruccioncontinue.instruccioncontinue(tipo_instruccion.CONTINUE);
break;
case 19: case 75:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.INCREMENTO);
break;
case 20: case 76:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.DECREMENTO);
break;
case 21:
this.$=new declaracion.declaracion($$[$0-1],$$[$0]);
break;
case 22: case 56: case 66:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 24:
this.$=new variable.variable(false,$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0]);
break;
case 25:
this.$=new variable.variable(false,$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,undefined,$$[$0]);
break;
case 26:
this.$=new variable.variable(false,$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0],undefined);
break;
case 27:
this.$=new variable.variable(false,$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 28:
this.$= new variable.variable(true,$$[$0-8],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6],undefined,$$[$0-1]);
break;
case 29:
this.$= new variable.variable(true,$$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,undefined,undefined,$$[$0-1]);
break;
case 30:
this.$=tipo_variable.LET;
break;
case 31:
this.$=tipo_variable.CONST;
break;
case 32:
this.$ = new asignacion.asignacion($$[$0-2],$$[$0]);
break;
case 33:
this.$= new instruccionif.instruccionif($$[$0-4],$$[$0-1]);
break;
case 34:
this.$= new instruccionifelse.instruccionifelse($$[$0-5],$$[$0-2],$$[$0]);
break;
case 35:
this.$= new instruccionelseif.instruccionelseif($$[$0-4],$$[$0-1],undefined);
break;
case 36:
this.$= new instruccionelseif.instruccionelseif($$[$0-5],$$[$0-2],$$[$0]);
break;
case 38:
this.$= new instruccionelse.instruccionelse($$[$0-1]);
break;
case 39:
this.$= new instruccionswitch.instruccionswitch($$[$0-4],$$[$0-1]);
break;
case 42:
this.$= new caso.caso($$[$0-2],$$[$0]);
break;
case 43:
this.$= new caso.caso(undefined,$$[$0]);
break;
case 44: case 45:
this.$= new instruccionfor.instruccionfor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 48:
this.$= new instruccionwhile.instruccionwhile($$[$0-4],$$[$0-1]);
break;
case 49:
this.$= new instrucciondowhile.instrucciondowhile($$[$0-5],$$[$0-1]);
break;
case 50:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-5],$$[$0-1],undefined,undefined);
break;
case 51:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-8],$$[$0-1],$$[$0-6],$$[$0-3]);
break;
case 52:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-6],$$[$0-1],$$[$0-4],undefined);
break;
case 53:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-7],$$[$0-1],undefined,$$[$0-3]);
break;
case 54:
this.$= new llamarfuncion.llamarfuncion($$[$0-2],undefined);
break;
case 55:
this.$= new llamarfuncion.llamarfuncion($$[$0-3],$$[$0-1]);
break;
case 58:
this.$= new parametro.parametro($$[$0-2],$$[$0]);
break;
case 59:
this.$=tipo_valor.STRING;
break;
case 60:
this.$=tipo_valor.NUMBER;
break;
case 61:
this.$=tipo_valor.BOOLEAN;
break;
case 62:
this.$=tipo_valor.VOID;
break;
case 63:
this.$=new imprimir.imprimir($$[$0-2]);
break;
case 64:
this.$= new instruccionreturn.instruccionreturn(undefined);
break;
case 65:
this.$= new instruccionreturn.instruccionreturn($$[$0-1]);
break;
case 67:
this.$=[$$[$0]]
break;
case 68:
this.$= new unaria.unaria(operador.MENOS,$$[$0]);
break;
case 69:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MAS,$$[$0]);
break;
case 70:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MENOS,$$[$0]);
break;
case 71:
this.$= new aritmetica.aritmetica($$[$0-2],operador.POR,$$[$0]);
break;
case 72:
this.$= new aritmetica.aritmetica($$[$0-2],operador.DIVISION,$$[$0]);
break;
case 73:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MODULO,$$[$0]);
break;
case 74:
this.$= new aritmetica.aritmetica($$[$0-2],operador.EXPONENTE,$$[$0]);
break;
case 77:
this.$= new relacional.relacional($$[$0-2],operador.MAYORQUE,$$[$0]);
break;
case 78:
this.$= new relacional.relacional($$[$0-2],operador.MENORQUE,$$[$0]);
break;
case 79:
this.$= new relacional.relacional($$[$0-2],operador.MAYORIGUALQUE,$$[$0]);
break;
case 80:
this.$= new relacional.relacional($$[$0-2],operador.MENORIGUALQUE,$$[$0]);
break;
case 81:
this.$= new relacional.relacional($$[$0-2],operador.IGUALQUE,$$[$0]);
break;
case 82:
this.$= new relacional.relacional($$[$0-2],operador.DIFERENTEQUE,$$[$0]);
break;
case 83:
this.$= new logica.logica($$[$0-2],operador.AND,$$[$0]);
break;
case 84:
this.$= new logica.logica($$[$0-2],operador.OR,$$[$0]);
break;
case 85:
this.$= new unaria.unaria(operador.NOT,$$[$0]);
break;
case 87:
this.$= new operadorternario.operadorternario($$[$0-4],$$[$0-2],$$[$0]);
break;
case 88:
this.$=new numero.numero(Number($$[$0]),tipo_valor.NUMBER);
break;
case 89:
this.$=new valorLogico.valorLogico("TRUE",tipo_valor.BOOLEAN);
break;
case 90:
this.$=new valorLogico.valorLogico("FALSE",tipo_valor.BOOLEAN);
break;
case 91: case 92:
this.$=new cadena.cadena($$[$0],tipo_valor.STRING);
break;
case 93:
this.$=new identificador.identificador($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vf,[2,3]),{8:[1,33]},o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),{8:[1,34]},{8:[1,35]},{19:[1,36]},{8:[1,37]},{8:[1,38]},o($Vf,[2,17]),{8:[1,39]},{25:$Vg,29:40,31:41},{19:[1,43]},{19:[1,44]},{19:[1,45]},{19:[1,46]},{42:[1,47]},{65:[1,48]},{25:[1,49]},{19:$Vh,26:$Vi,27:$Vj,34:$Vk},{8:[1,54],16:65,19:$Vl,25:$Vm,35:55,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{25:[2,30]},{25:[2,31]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,12]),o($Vf,[2,13]),{20:[1,66]},o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,18]),{8:[2,21],30:[1,67]},o($Vu,[2,23]),o($Vu,$Vv,{32:$Vw,34:$Vx}),{16:65,19:$Vl,25:$Vm,35:70,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:71,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{7:72,24:73,25:[1,75],28:74,39:$V5,40:$V6},{16:65,19:$Vl,25:$Vm,35:76,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{4:77,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{66:[1,78]},{19:[1,79]},{16:65,19:$Vl,20:[1,80],25:$Vm,35:82,38:81,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($Vy,[2,19]),o($Vy,[2,20]),{16:65,19:$Vl,25:$Vm,35:83,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($Vf,[2,64]),{8:[1,84],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{16:65,19:$Vl,25:$Vm,35:100,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($VO,[2,93],{19:$Vh,26:[1,101],27:[1,102]}),{16:65,19:$Vl,25:$Vm,35:103,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:104,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($VO,[2,88]),o($VO,[2,89]),o($VO,[2,90]),o($VO,[2,91]),o($VO,[2,92]),o($VO,[2,94]),{8:[1,105]},{25:$Vg,31:106},{33:107,60:$VP,61:$VQ,62:$VR,63:$VS},{16:65,19:$Vl,25:$Vm,35:112,36:[1,113],68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{20:[1,114],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{20:[1,115],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{8:[1,116]},{8:[1,117]},{25:[1,118],29:40,31:41},{34:$Vk},{20:[1,119],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,120],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{19:[1,121]},{20:[1,122],25:$VT,58:123,59:124},o($VO,[2,54]),{20:[1,126],30:$VU},o($VV,[2,67],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN}),{8:[2,32],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},o($Vf,[2,65]),{16:65,19:$Vl,25:$Vm,35:128,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:129,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:130,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:131,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:132,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:133,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:134,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:135,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:136,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:137,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:138,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:139,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:140,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:141,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:142,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($VO,[2,68]),o($VO,[2,75]),o($VO,[2,76]),o($VW,[2,85],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),{20:[1,143],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},o($Vf,[2,14]),o($Vu,[2,22]),o($Vu,[2,26],{34:[1,144],36:[1,145]}),o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,61]),o($VX,[2,62]),o($Vu,[2,25],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN}),{16:65,19:$Vl,25:$Vm,35:82,38:146,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{42:[1,147]},{42:[1,148]},{16:65,19:$Vl,25:$Vm,35:149,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{16:65,19:$Vl,25:$Vm,35:150,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($Vu,$Vv,{32:$Vw,34:$Vx,53:[1,151],54:[1,152]}),{42:[1,153]},{55:[1,154]},{16:65,19:$Vl,25:$Vm,35:155,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{32:[1,157],42:[1,156]},{20:[1,158],30:[1,159]},o($VY,[2,57]),{32:[1,160]},o($VO,[2,55]),{16:65,19:$Vl,25:$Vm,35:161,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($VZ,[2,69],{70:$VB,71:$VC,72:$VD,73:$VE}),o($VZ,[2,70],{70:$VB,71:$VC,72:$VD,73:$VE}),o($V_,[2,71],{73:$VE}),o($V_,[2,72],{73:$VE}),o($V_,[2,73],{73:$VE}),o($VO,[2,74]),o($V$,[2,77],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V$,[2,78],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V$,[2,79],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V$,[2,80],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V$,[2,81],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V$,[2,82],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VW,[2,83],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o([8,20,30,32,37,81,83],[2,84],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL}),{32:[1,162],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},o($VO,[2,86]),{16:65,19:$Vl,25:$Vm,35:163,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{37:[1,164]},{30:$VU,37:[1,165]},{4:166,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{48:167,49:168,50:$V01,51:$V11},{8:[1,171],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{8:[1,172],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{25:[1,173]},{25:[1,174]},{4:175,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{19:[1,176]},{20:[1,177],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{4:178,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{33:179,60:$VP,61:$VQ,62:$VR,63:$VS},{32:[1,180],42:[1,181]},{25:$VT,59:182},{33:183,60:$VP,61:$VQ,62:$VR,63:$VS},o($VV,[2,66],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN}),{16:65,19:$Vl,25:$Vm,35:184,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($Vu,[2,24],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN}),{34:[1,185]},o($Vu,[2,29]),{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,186],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{43:[1,187],49:188,50:$V01,51:$V11},o($V21,[2,41]),{16:65,19:$Vl,25:$Vm,35:189,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{32:[1,190]},{17:191,25:$V31},{17:193,25:$V31},{20:[1,194]},{20:[1,195]},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,196],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{16:65,19:$Vl,25:$Vm,35:197,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{8:[1,198]},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,199],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{42:[1,200]},{33:201,60:$VP,61:$VQ,62:$VR,63:$VS},{4:202,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($VY,[2,56]),o($VY,[2,58]),o([8,20,30,32,37,83],[2,87],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{36:[1,203]},o($Vf,[2,33],{44:204,46:206,45:$V41}),o($Vf,[2,39]),o($V21,[2,40]),{32:[1,207],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},{4:208,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{20:[1,209]},{26:$Vi,27:$Vj},{20:[1,210]},{42:[1,211]},{43:[1,212]},o($Vf,[2,48]),{20:[1,213],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},o($Vf,[2,63]),o($Vf,[2,50]),{4:214,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{42:[1,215]},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,216],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{16:65,19:$Vl,25:$Vm,35:82,38:217,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},o($Vf,[2,34]),{41:[1,218],42:[1,219]},o($Vf,[2,37]),{4:220,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($V21,[2,43],{7:4,9:5,10:6,11:7,13:9,14:10,15:11,16:12,17:13,23:17,24:18,28:19,6:32,12:$V0,18:$V1,21:$V2,22:$V3,25:$V4,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve}),{42:[1,221]},{42:[1,222]},{4:223,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{4:224,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vf,[2,49]),{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,225],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{4:226,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vf,[2,52]),{30:$VU,37:[1,227]},{19:[1,228]},{4:229,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($V21,[2,42],{7:4,9:5,10:6,11:7,13:9,14:10,15:11,16:12,17:13,23:17,24:18,28:19,6:32,12:$V0,18:$V1,21:$V2,22:$V3,25:$V4,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve}),{4:230,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{4:231,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,232],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,233],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vf,[2,53]),{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,234],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vu,[2,28]),{16:65,19:$Vl,25:$Vm,35:235,68:$Vn,82:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:$Vt},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,236],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,237],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,238],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vf,[2,46]),o($Vf,[2,47]),o($Vf,[2,51]),{20:[1,239],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,83:$VN},o($Vf,[2,38]),o($Vf,[2,44]),o($Vf,[2,45]),{42:[1,240]},{4:241,6:3,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},{6:32,7:4,9:5,10:6,11:7,12:$V0,13:9,14:10,15:11,16:12,17:13,18:$V1,21:$V2,22:$V3,23:17,24:18,25:$V4,28:19,39:$V5,40:$V6,41:$V7,43:[1,242],47:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,64:$Vd,67:$Ve},o($Vf,[2,35],{46:206,44:243,45:$V41}),o($Vf,[2,36])],
defaultActions: {29:[2,30],30:[2,31],31:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //***********************EXPRESIONES********************************
const cadena= require('../ArchivosTS/expresiones/cadena');
const valorLogico= require('../ArchivosTS/expresiones/valorLogico');
const numero= require('../ArchivosTS/expresiones/numero');
const aritmetica= require('../ArchivosTS/expresiones/operaciones/aritmetica');
const relacional= require('../ArchivosTS/expresiones/operaciones/relacional');
const logica= require('../ArchivosTS/expresiones/operaciones/logica');
const unaria= require('../ArchivosTS/expresiones/operaciones/unaria');
const identificador= require('../ArchivosTS/expresiones/identificador');
const operadorternario= require('../ArchivosTS/expresiones/operadorternario');
  //***********************INSTRUCCIONES***************************
const imprimir= require('../ArchivosTS/instrucciones/imprimir');
const declaracion= require('../ArchivosTS/instrucciones/declaracion');
const asignacion = require('../ArchivosTS/instrucciones/asignacion');
const instruccionif= require('../ArchivosTS/instrucciones/instruccionif');
const instruccionifelse= require('../ArchivosTS/instrucciones/instruccionifelse');
const instruccionelse= require('../ArchivosTS/instrucciones/instruccionelse');
const instruccionelseif= require('../ArchivosTS/instrucciones/instruccionelseif');
const instruccionswitch= require('../ArchivosTS/instrucciones/instruccionswitch');
const instruccionwhile= require('../ArchivosTS/instrucciones/instruccionwhile');
const incremento_decremento= require('../ArchivosTS/instrucciones/incremento_decremento');
const instrucciondowhile= require('../ArchivosTS/instrucciones/instrucciondowhile');
const graficar= require('../ArchivosTS/instrucciones/graficar');
const instruccionfor= require('../ArchivosTS/instrucciones/instruccionfor');
const instruccionbreak= require('../ArchivosTS/instrucciones/instruccionBreak');
const instruccioncontinue= require('../ArchivosTS/instrucciones/instruccioncontinue');
const instruccionreturn= require('../ArchivosTS/instrucciones/instruccionreturn');
const declaracionfuncion= require('../ArchivosTS/instrucciones/declaracionfuncion');
const llamarfuncion= require('../ArchivosTS/instrucciones/llamarfuncion');
const declaracionarreglo= require('../ArchivosTS/instrucciones/declaracionarreglo');
  //*****************************OTROS*********************************
const tipo_valor= require('../ArchivosTS/entorno/tipo').tipo_valor;
const tipo_variable= require('../ArchivosTS/entorno/tipo').tipo_variable;
const tipo_instruccion= require('../ArchivosTS/entorno/tipo').tipo_instruccion;
const operador= require('../ArchivosTS/entorno/tipo').operador;
const variable= require('../ArchivosTS/instrucciones/variable');
const caso= require('../ArchivosTS/instrucciones/caso');
const parametro= require('../ArchivosTS/instrucciones/parametro');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 21;
break;
case 4:return 22;
break;
case 5:return 67;
break;
case 6:return 60;
break;
case 7:return 61;
break;
case 8:return 62;
break;
case 9:return 85;
break;
case 10:return 86;
break;
case 11:return 63;
break;
case 12:return 'RARRAY';
break;
case 13:return 18;
break;
case 14:return 57;
break;
case 15:return 64;
break;
case 16:return 66;
break;
case 17:return 39;
break;
case 18:return 40;
break;
case 19:return 41;
break;
case 20:return 45;
break;
case 21:return 55;
break;
case 22:return 56;
break;
case 23:return 47;
break;
case 24:return 50;
break;
case 25:return 51;
break;
case 26:return 52;
break;
case 27:return 54;
break;
case 28:return 53;  
break;
case 29:return 69;
break;
case 30:return 68;
break;
case 31:return 70;
break;
case 32:return 71;
break;
case 33:return 73;
break;
case 34:return 72;
break;
case 35:return 26;
break;
case 36:return 27;
break;
case 37:return 74;
break;
case 38:return 75;
break;
case 39:return 76;
break;
case 40:return 77;
break;
case 41:return 78;
break;
case 42:return 79;
break;
case 43:return 80;
break;
case 44:return 81;
break;
case 45:return 82;
break;
case 46:return 83;
break;
case 47:return 32;
break;
case 48:return 65;
break;
case 49:return 30;
break;
case 50:return 8;
break;
case 51:return 34;
break;
case 52:return 36;
break;
case 53:return 37;
break;
case 54:return 42;
break;
case 55:return 43;
break;
case 56:return 19;
break;
case 57:return 20;
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 88; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 87; 
break;
case 60:return 84;
break;
case 61:return 25;
break;
case 62:return 5;
break;
case 63: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}