/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,26],$V5=[1,27],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,24],$Vc=[1,23],$Vd=[1,25],$Ve=[5,14,17,20,21,32,33,34,36,39,44,47,48,49,56,59],$Vf=[1,37],$Vg=[1,55],$Vh=[1,49],$Vi=[1,47],$Vj=[1,48],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[2,13],$Vq=[16,26],$Vr=[1,72],$Vs=[1,71],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[16,19,26,28,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,108],$VM=[16,19,26,28,73,74,76],$VN=[16,19,26,30,35],$VO=[19,26],$VP=[16,19,26,28,61,62,67,68,69,70,71,72,73,74,76],$VQ=[16,19,26,28,61,62,63,64,65,67,68,69,70,71,72,73,74,76],$VR=[16,19,26,28,67,68,69,70,71,72,73,74,76],$VS=[1,148],$VT=[1,149],$VU=[36,42,43],$VV=[14,17,20,21,32,33,34,39,44,47,48,49,56,59],$VW=[2,35],$VX=[2,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"instruccionif":8,"instruccionswitch":9,"instruccionfor":10,"instruccionwhile":11,"imprimir":12,"declararfuncion":13,"IDENTIFICADOR":14,"RMASMAS":15,"RPUNTOCOMA":16,"RGRAFICAR":17,"RPARA":18,"RPARC":19,"RBREAK":20,"RCONTINUE":21,"instruccionreturn":22,"asignacion":23,"tipovariable":24,"listavariables":25,"RCOMA":26,"variable":27,"RDOSPUNTOS":28,"tipodato":29,"RIGUAL":30,"expresion":31,"RLET":32,"RCONST":33,"RIF":34,"RLLAVEA":35,"RLLAVEC":36,"instruccionelse":37,"RELSE":38,"RSWITCH":39,"casos":40,"caso":41,"RCASE":42,"RDEFAULT":43,"RFOR":44,"ROF":45,"RIN":46,"RWHILE":47,"RDO":48,"RFUNCTION":49,"parametros":50,"parametro":51,"RSTRING":52,"RNUMBER":53,"RBOOLEAN":54,"RVOID":55,"RCONSOLE":56,"RPUNTO":57,"RLOG":58,"RRETURN":59,"listaexpresiones":60,"RMENOS":61,"RMAS":62,"RPOR":63,"RDIVISION":64,"RMODULO":65,"REXPONENTE":66,"RMAYORQUE":67,"RMENORQUE":68,"RMAYORIGUALQUE":69,"RMENORIGUALQUE":70,"RIGUALQUE":71,"RDIFERENTEQUE":72,"RAND":73,"ROR":74,"RNOT":75,"RINTERROGACION":76,"NUM":77,"RTRUE":78,"RFALSE":79,"CADENACOMILLADOBLE":80,"CADENACOMILLASIMPLE":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"IDENTIFICADOR",15:"RMASMAS",16:"RPUNTOCOMA",17:"RGRAFICAR",18:"RPARA",19:"RPARC",20:"RBREAK",21:"RCONTINUE",26:"RCOMA",28:"RDOSPUNTOS",30:"RIGUAL",32:"RLET",33:"RCONST",34:"RIF",35:"RLLAVEA",36:"RLLAVEC",38:"RELSE",39:"RSWITCH",42:"RCASE",43:"RDEFAULT",44:"RFOR",45:"ROF",46:"RIN",47:"RWHILE",48:"RDO",49:"RFUNCTION",52:"RSTRING",53:"RNUMBER",54:"RBOOLEAN",55:"RVOID",56:"RCONSOLE",57:"RPUNTO",58:"RLOG",59:"RRETURN",61:"RMENOS",62:"RMAS",63:"RPOR",64:"RDIVISION",65:"RMODULO",66:"REXPONENTE",67:"RMAYORQUE",68:"RMENORQUE",69:"RMAYORIGUALQUE",70:"RMENORIGUALQUE",71:"RIGUALQUE",72:"RDIFERENTEQUE",73:"RAND",74:"ROR",75:"RNOT",76:"RINTERROGACION",77:"NUM",78:"RTRUE",79:"RFALSE",80:"CADENACOMILLADOBLE",81:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,4],[6,2],[6,2],[6,1],[6,1],[7,3],[25,3],[25,1],[27,5],[27,3],[27,3],[27,1],[24,1],[24,1],[23,4],[8,7],[8,8],[37,2],[37,4],[9,7],[40,2],[40,1],[41,6],[41,5],[10,15],[10,10],[10,10],[11,7],[11,8],[13,7],[13,10],[13,8],[13,9],[50,3],[50,1],[51,3],[29,1],[29,1],[29,1],[29,1],[12,7],[22,2],[22,3],[60,3],[60,1],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,5],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 19:
this.$=[$$[$0]];
break;
case 4: case 9: case 16:
this.$=$$[$0];
break;
case 17:
this.$=new declaracion.declaracion($$[$0-2],$$[$0-1]);
break;
case 18:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 20:
this.$=new variable.variable($$[$0-4],$$[$0-2],$$[$0]);
break;
case 21:
this.$=new variable.variable($$[$0-2],undefined,$$[$0]);
break;
case 22:
this.$=new variable.variable($$[$0-2],$$[$0],undefined);
break;
case 23:
this.$=new variable.variable($$[$0]);
break;
case 24:
this.$=tipo_variable.LET;
break;
case 25:
this.$=tipo_variable.CONST;
break;
case 26:
this.$ = new asignacion.asignacion($$[$0-3],$$[$0-1]);
break;
case 48:
this.$=tipo_valor.STRING;
break;
case 49:
this.$=tipo_valor.NUMBER;
break;
case 50:
this.$=tipo_valor.BOOLEAN;
break;
case 51:
this.$=tipo_valor.VOID;
break;
case 52:
this.$=new imprimir.imprimir($$[$0-2]);
break;
case 57:
this.$= new unaria.unaria(operador.MENOS,$$[$0]);
break;
case 58:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MAS,$$[$0]);
break;
case 59:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MENOS,$$[$0]);
break;
case 60:
this.$= new aritmetica.aritmetica($$[$0-2],operador.POR,$$[$0]);
break;
case 61:
this.$= new aritmetica.aritmetica($$[$0-2],operador.DIVISION,$$[$0]);
break;
case 62:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MODULO,$$[$0]);
break;
case 63:
this.$= new aritmetica.aritmetica($$[$0-2],operador.EXPONENTE,$$[$0]);
break;
case 64:
this.$= new relacional.relacional($$[$0-2],operador.MAYORQUE,$$[$0]);
break;
case 65:
this.$= new relacional.relacional($$[$0-2],operador.MENORQUE,$$[$0]);
break;
case 66:
this.$= new relacional.relacional($$[$0-2],operador.MAYORIGUALQUE,$$[$0]);
break;
case 67:
this.$= new relacional.relacional($$[$0-2],operador.MENORIGUALQUE,$$[$0]);
break;
case 68:
this.$= new relacional.relacional($$[$0-2],operador.IGUALQUE,$$[$0]);
break;
case 69:
this.$= new relacional.relacional($$[$0-2],operador.DIFERENTEQUE,$$[$0]);
break;
case 70:
this.$= new logica.logica($$[$0-2],operador.AND,$$[$0]);
break;
case 71:
this.$= new logica.logica($$[$0-2],operador.OR,$$[$0]);
break;
case 72:
this.$= new unaria.unaria(operador.NOT,$$[$0]);
break;
case 73:
this.$=$$[$0-1];
break;
case 75:
this.$=new numero.numero(Number($$[$0]),tipo_valor.NUMBER);
break;
case 76:
this.$=new valorLogico.valorLogico("TRUE",tipo_valor.BOOLEAN);
break;
case 77:
this.$=new valorLogico.valorLogico("FALSE",tipo_valor.BOOLEAN);
break;
case 78: case 79:
this.$=new cadena.cadena($$[$0],tipo_valor.STRING);
break;
case 80:
this.$=new identificador.identificador($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{15:[1,30],30:[1,31]},{18:[1,32]},{16:[1,33]},{16:[1,34]},o($Ve,[2,15]),o($Ve,[2,16]),{14:$Vf,25:35,27:36},{18:[1,38]},{18:[1,39]},{18:[1,40]},{18:[1,41]},{35:[1,42]},{57:[1,43]},{14:[1,44]},{14:$Vg,16:[1,45],18:$Vh,31:46,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:[2,24]},{14:[2,25]},{1:[2,1]},o($Ve,[2,2]),{16:[1,56]},{14:$Vg,18:$Vh,31:57,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{19:[1,58]},o($Ve,$Vp),o($Ve,[2,14]),{16:[1,59],26:[1,60]},o($Vq,[2,19]),o($Vq,[2,23],{28:[1,61],30:[1,62]}),{14:$Vg,18:$Vh,31:63,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:64,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{24:65,32:$V4,33:$V5},{14:$Vg,18:$Vh,31:66,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{4:67,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{58:[1,68]},{18:[1,69]},o($Ve,[2,53]),{16:[1,70],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{14:$Vg,18:$Vh,31:86,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:87,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:88,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},o($VG,[2,75]),o($VG,[2,76]),o($VG,[2,77]),o($VG,[2,78]),o($VG,[2,79]),o($VG,[2,80],{18:[1,89]}),o($Ve,[2,11]),{16:[1,90],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{16:[1,91]},o($Ve,[2,17]),{14:$Vf,27:92},{29:93,52:$VH,53:$VI,54:$VJ,55:$VK},{14:$Vg,18:$Vh,31:98,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{19:[1,99],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{19:[1,100],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{14:[1,101]},{19:[1,102],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,103],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{18:[1,104]},{14:$VL,19:[1,105],50:106,51:107},o($Ve,[2,54]),{14:$Vg,18:$Vh,31:109,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:110,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:111,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:112,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:113,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:114,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:115,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:116,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:117,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:118,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:119,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:120,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:121,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:122,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:$Vg,18:$Vh,31:123,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},o($VG,[2,57]),o($VM,[2,72],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC}),{19:[1,124],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{14:$Vg,18:$Vh,31:126,60:125,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},o($Ve,[2,26]),o($Ve,[2,12]),o($Vq,[2,18]),o($Vq,[2,22],{30:[1,127]}),o($VN,[2,48]),o($VN,[2,49]),o($VN,[2,50]),o($VN,[2,51]),o($Vq,[2,21],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF}),{35:[1,128]},{35:[1,129]},{30:[1,130],45:[1,131],46:[1,132]},{35:[1,133]},{47:[1,134]},{14:$Vg,18:$Vh,31:135,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{28:[1,137],35:[1,136]},{19:[1,138],26:[1,139]},o($VO,[2,46]),{28:[1,140]},o($VP,[2,58],{63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VP,[2,59],{63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VQ,[2,60],{66:$Vw}),o($VQ,[2,61],{66:$Vw}),o($VQ,[2,62],{66:$Vw}),o($VG,[2,63]),o($VR,[2,64],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VR,[2,65],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VR,[2,66],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VR,[2,67],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VR,[2,68],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VR,[2,69],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw}),o($VM,[2,70],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC}),o([16,19,26,28,74,76],[2,71],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD}),{28:[1,141],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},o($VG,[2,73]),{19:[1,142],26:[1,143]},o($VO,[2,56],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF}),{14:$Vg,18:$Vh,31:144,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{4:145,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{40:146,41:147,42:$VS,43:$VT},{14:$Vg,18:$Vh,31:150,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{14:[1,151]},{14:[1,152]},{4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{18:[1,154]},{19:[1,155],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{4:156,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{29:157,52:$VH,53:$VI,54:$VJ,55:$VK},{28:[1,158],35:[1,159]},{14:$VL,51:160},{29:161,52:$VH,53:$VI,54:$VJ,55:$VK},{14:$Vg,18:$Vh,31:162,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},o($VG,[2,81]),{14:$Vg,18:$Vh,31:163,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},o($Vq,[2,20],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF}),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,164],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{36:[1,165],41:166,42:$VS,43:$VT},o($VU,[2,33]),{14:$Vg,18:$Vh,31:167,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{28:[1,168]},{16:[1,169],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{19:[1,170]},{19:[1,171]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,172],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{14:$Vg,18:$Vh,31:173,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{16:[1,174]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,175],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{35:[1,176]},{29:177,52:$VH,53:$VI,54:$VJ,55:$VK},{4:178,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($VO,[2,45]),o($VO,[2,47]),o([16,19,26,28,76],[2,74],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($VO,[2,55],{61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF}),o($Ve,[2,27],{37:179,38:[1,180]}),o($Ve,[2,31]),o($VU,[2,32]),{28:[1,181],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{4:182,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{14:$Vg,18:$Vh,31:183,61:$Vi,75:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo},{35:[1,184]},{36:[1,185]},o($Ve,[2,39]),{19:[1,186],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},o($Ve,[2,52]),o($Ve,[2,41]),{4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{35:[1,188]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,189],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,28]),{8:190,34:$V6,35:[1,191]},{4:192,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:[1,193],21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{16:[1,194],61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,76:$VF},{4:195,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,40]),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,197],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{4:198,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,43]),o($Ve,[2,29]),{4:199,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:[1,200],21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{16:[1,201]},{14:[1,202]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,203],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,204],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,44]),{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,205],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,206],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{16:[1,207]},o($VV,$Vp,{36:$VW,42:$VW,43:$VW}),{15:[1,208]},o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,42]),o($Ve,[2,30]),o($VV,$Vp,{36:$VX,42:$VX,43:$VX}),{19:[1,209]},{35:[1,210]},{4:211,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,17:$V1,20:$V2,21:$V3,22:15,23:16,24:17,32:$V4,33:$V5,34:$V6,36:[1,212],39:$V7,44:$V8,47:$V9,48:$Va,49:$Vb,56:$Vc,59:$Vd},o($Ve,[2,36])],
defaultActions: {26:[2,24],27:[2,25],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //EXPRESIONES
const cadena= require('../ArchivosTS/expresiones/cadena');
const valorLogico= require('../ArchivosTS/expresiones/valorLogico');
const numero= require('../ArchivosTS/expresiones/numero');
const aritmetica= require('../ArchivosTS/expresiones/operaciones/aritmetica');
const relacional= require('../ArchivosTS/expresiones/operaciones/relacional');
const logica= require('../ArchivosTS/expresiones/operaciones/logica');
const unaria= require('../ArchivosTS/expresiones/operaciones/unaria');
const identificador= require('../ArchivosTS/expresiones/identificador');
  //INSTRUCCIONES
const imprimir= require('../ArchivosTS/instrucciones/imprimir');
const declaracion= require('../ArchivosTS/instrucciones/declaracion');
const asignacion = require('../ArchivosTS/instrucciones/asignacion');

  //OTROS
const tipo_valor= require('../ArchivosTS/entorno/tipo').tipo_valor;
const tipo_variable= require('../ArchivosTS/entorno/tipo').tipo_variable;
const operador= require('../ArchivosTS/entorno/tipo').operador;
const variable= require('../ArchivosTS/instrucciones/variable');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 59;
break;
case 6:return 52;
break;
case 7:return 53;
break;
case 8:return 54;
break;
case 9:return 78;
break;
case 10:return 79;
break;
case 11:return 55;
break;
case 12:return 'RARRAY';
break;
case 13:return 17;
break;
case 14:return 49;
break;
case 15:return 56;
break;
case 16:return 58;
break;
case 17:return 32;
break;
case 18:return 33;
break;
case 19:return 34;
break;
case 20:return 38;
break;
case 21:return 47;
break;
case 22:return 48;
break;
case 23:return 39;
break;
case 24:return 42;
break;
case 25:return 43;
break;
case 26:return 44;
break;
case 27:return 46;
break;
case 28:return 45;  
break;
case 29:return 62;
break;
case 30:return 61;
break;
case 31:return 63;
break;
case 32:return 64;
break;
case 33:return 66;
break;
case 34:return 65;
break;
case 35:return 15;
break;
case 36:return 'RMENOSMENOS';
break;
case 37:return 67;
break;
case 38:return 68;
break;
case 39:return 69;
break;
case 40:return 70;
break;
case 41:return 71;
break;
case 42:return 72;
break;
case 43:return 73;
break;
case 44:return 74;
break;
case 45:return 75;
break;
case 46:return 76;
break;
case 47:return 28;
break;
case 48:return 57;
break;
case 49:return 26;
break;
case 50:return 16;
break;
case 51:return 30;
break;
case 52:return 'RCORCHETEA';
break;
case 53:return 'RCORCHETEC';
break;
case 54:return 35;
break;
case 55:return 36;
break;
case 56:return 18;
break;
case 57:return 19;
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 60:return 77;
break;
case 61:return 14;
break;
case 62:return 5;
break;
case 63: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}