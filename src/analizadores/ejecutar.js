/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,26],$V4=[1,28],$V5=[1,29],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,25],$Vc=[1,24],$Vd=[1,27],$Ve=[5,17,20,21,24,35,36,37,39,43,48,51,52,53,61,64],$Vf=[1,41],$Vg=[1,49],$Vh=[1,50],$Vi=[1,51],$Vj=[1,52],$Vk=[1,58],$Vl=[1,56],$Vm=[1,55],$Vn=[1,57],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[2,14],$Vu=[8,29],$Vv=[2,26],$Vw=[1,67],$Vx=[1,68],$Vy=[8,19],$Vz=[1,85],$VA=[1,84],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[8,19,29,31,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80],$VP=[1,107],$VQ=[1,108],$VR=[1,109],$VS=[1,110],$VT=[1,123],$VU=[19,29],$VV=[8,19,29,31,77,78,80],$VW=[8,19,29,33,38],$VX=[8,19,29,31,65,66,71,72,73,74,75,76,77,78,80],$VY=[8,19,29,31,65,66,67,68,69,71,72,73,74,75,76,77,78,80],$VZ=[8,19,29,31,71,72,73,74,75,76,77,78,80],$V_=[1,163],$V$=[1,164],$V01=[39,46,47],$V11=[1,185],$V21=[1,197],$V31=[17,20,21,24,35,36,37,43,48,51,52,53,61,64],$V41=[2,40],$V51=[2,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"lista":4,"EOF":5,"instruccion":6,"declaraciones":7,"RPUNTOCOMA":8,"instruccionif":9,"instruccionswitch":10,"instruccionfor":11,"instruccionwhile":12,"imprimir":13,"declararfuncion":14,"llamarfuncion":15,"masmenos":16,"RGRAFICAR":17,"RPARA":18,"RPARC":19,"RBREAK":20,"RCONTINUE":21,"instruccionreturn":22,"asignacion":23,"IDENTIFICADOR":24,"RMASMAS":25,"RMENOSMENOS":26,"tipovariable":27,"listavariables":28,"RCOMA":29,"variable":30,"RDOSPUNTOS":31,"tipodato":32,"RIGUAL":33,"expresion":34,"RLET":35,"RCONST":36,"RIF":37,"RLLAVEA":38,"RLLAVEC":39,"instruccionelseif":40,"RELSE":41,"instruccionelse":42,"RSWITCH":43,"casos":44,"caso":45,"RCASE":46,"RDEFAULT":47,"RFOR":48,"ROF":49,"RIN":50,"RWHILE":51,"RDO":52,"RFUNCTION":53,"parametros":54,"listaexpresiones":55,"parametro":56,"RSTRING":57,"RNUMBER":58,"RBOOLEAN":59,"RVOID":60,"RCONSOLE":61,"RPUNTO":62,"RLOG":63,"RRETURN":64,"RMENOS":65,"RMAS":66,"RPOR":67,"RDIVISION":68,"RMODULO":69,"REXPONENTE":70,"RMAYORQUE":71,"RMENORQUE":72,"RMAYORIGUALQUE":73,"RMENORIGUALQUE":74,"RIGUALQUE":75,"RDIFERENTEQUE":76,"RAND":77,"ROR":78,"RNOT":79,"RINTERROGACION":80,"NUM":81,"RTRUE":82,"RFALSE":83,"CADENACOMILLADOBLE":84,"CADENACOMILLASIMPLE":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"RPUNTOCOMA",17:"RGRAFICAR",18:"RPARA",19:"RPARC",20:"RBREAK",21:"RCONTINUE",24:"IDENTIFICADOR",25:"RMASMAS",26:"RMENOSMENOS",29:"RCOMA",31:"RDOSPUNTOS",33:"RIGUAL",35:"RLET",36:"RCONST",37:"RIF",38:"RLLAVEA",39:"RLLAVEC",41:"RELSE",43:"RSWITCH",46:"RCASE",47:"RDEFAULT",48:"RFOR",49:"ROF",50:"RIN",51:"RWHILE",52:"RDO",53:"RFUNCTION",57:"RSTRING",58:"RNUMBER",59:"RBOOLEAN",60:"RVOID",61:"RCONSOLE",62:"RPUNTO",63:"RLOG",64:"RRETURN",65:"RMENOS",66:"RMAS",67:"RPOR",68:"RDIVISION",69:"RMODULO",70:"REXPONENTE",71:"RMAYORQUE",72:"RMENORQUE",73:"RMAYORIGUALQUE",74:"RMENORIGUALQUE",75:"RIGUALQUE",76:"RDIFERENTEQUE",77:"RAND",78:"ROR",79:"RNOT",80:"RINTERROGACION",81:"NUM",82:"RTRUE",83:"RFALSE",84:"CADENACOMILLADOBLE",85:"CADENACOMILLASIMPLE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,4],[6,2],[6,2],[6,1],[6,2],[16,2],[16,2],[7,2],[28,3],[28,1],[30,5],[30,3],[30,3],[30,1],[27,1],[27,1],[23,3],[9,7],[9,8],[40,8],[40,9],[40,1],[42,4],[10,7],[44,2],[44,1],[45,6],[45,5],[11,11],[11,11],[11,10],[11,10],[12,7],[12,8],[14,7],[14,10],[14,8],[14,9],[15,3],[15,4],[54,3],[54,1],[56,3],[32,1],[32,1],[32,1],[32,1],[13,7],[22,2],[22,3],[55,3],[55,1],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,5],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 37:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 22: case 38: case 54:
this.$=[$$[$0]];
break;
case 4: case 11: case 12: case 17: case 83:
this.$=$$[$0-1];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 16: case 34: case 91:
this.$=$$[$0];
break;
case 13:
this.$= new graficar.graficar();
break;
case 14:
this.$= new instruccionbreak.instruccionbreak(tipo_instruccion.BREAK);
break;
case 15:
this.$= new instruccioncontinue.instruccioncontinue(tipo_instruccion.CONTINUE);
break;
case 18: case 72:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.INCREMENTO);
break;
case 19: case 73:
this.$= new incremento_decremento.incremento_decremento($$[$0-1],operador.DECREMENTO);
break;
case 20:
this.$=new declaracion.declaracion($$[$0-1],$$[$0]);
break;
case 21: case 53: case 63:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 23:
this.$=new variable.variable($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2],$$[$0]);
break;
case 24:
this.$=new variable.variable($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,undefined,$$[$0]);
break;
case 25:
this.$=new variable.variable($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0],undefined);
break;
case 26:
this.$=new variable.variable($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 27:
this.$=tipo_variable.LET;
break;
case 28:
this.$=tipo_variable.CONST;
break;
case 29:
this.$ = new asignacion.asignacion($$[$0-2],$$[$0]);
break;
case 30:
this.$= new instruccionif.instruccionif($$[$0-4],$$[$0-1]);
break;
case 31:
this.$= new instruccionifelse.instruccionifelse($$[$0-5],$$[$0-2],$$[$0]);
break;
case 32:
this.$= new instruccionelseif.instruccionelseif($$[$0-4],$$[$0-1],undefined);
break;
case 33:
this.$= new instruccionelseif.instruccionelseif($$[$0-5],$$[$0-2],$$[$0]);
break;
case 35:
this.$= new instruccionelse.instruccionelse($$[$0-1]);
break;
case 36:
this.$= new instruccionswitch.instruccionswitch($$[$0-4],$$[$0-1]);
break;
case 39:
this.$= new caso.caso($$[$0-4],$$[$0-2]);
break;
case 40:
this.$= new caso.caso(undefined,$$[$0-2]);
break;
case 41: case 42:
this.$= new instruccionfor.instruccionfor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 45:
this.$= new instruccionwhile.instruccionwhile($$[$0-4],$$[$0-1]);
break;
case 46:
this.$= new instrucciondowhile.instrucciondowhile($$[$0-5],$$[$0-1]);
break;
case 47:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-5],$$[$0-1],undefined,undefined);
break;
case 48:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-8],$$[$0-1],$$[$0-6],$$[$0-3]);
break;
case 49:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-6],$$[$0-1],$$[$0-4],undefined);
break;
case 50:
this.$= new declaracionfuncion.declaracionfuncion($$[$0-7],$$[$0-1],undefined,$$[$0-3]);
break;
case 51:
this.$= new llamarfuncion.llamarfuncion($$[$0-2],undefined);
break;
case 52:
this.$= new llamarfuncion.llamarfuncion($$[$0-3],$$[$0-1]);
break;
case 55:
this.$= new parametro.parametro($$[$0-2],$$[$0]);
break;
case 56:
this.$=tipo_valor.STRING;
break;
case 57:
this.$=tipo_valor.NUMBER;
break;
case 58:
this.$=tipo_valor.BOOLEAN;
break;
case 59:
this.$=tipo_valor.VOID;
break;
case 60:
this.$=new imprimir.imprimir($$[$0-2]);
break;
case 61:
this.$= new instruccionreturn.instruccionreturn(undefined);
break;
case 62:
this.$= new instruccionreturn.instruccionreturn($$[$0-1]);
break;
case 64:
this.$=[$$[$0]]
break;
case 65:
this.$= new unaria.unaria(operador.MENOS,$$[$0]);
break;
case 66:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MAS,$$[$0]);
break;
case 67:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MENOS,$$[$0]);
break;
case 68:
this.$= new aritmetica.aritmetica($$[$0-2],operador.POR,$$[$0]);
break;
case 69:
this.$= new aritmetica.aritmetica($$[$0-2],operador.DIVISION,$$[$0]);
break;
case 70:
this.$= new aritmetica.aritmetica($$[$0-2],operador.MODULO,$$[$0]);
break;
case 71:
this.$= new aritmetica.aritmetica($$[$0-2],operador.EXPONENTE,$$[$0]);
break;
case 74:
this.$= new relacional.relacional($$[$0-2],operador.MAYORQUE,$$[$0]);
break;
case 75:
this.$= new relacional.relacional($$[$0-2],operador.MENORQUE,$$[$0]);
break;
case 76:
this.$= new relacional.relacional($$[$0-2],operador.MAYORIGUALQUE,$$[$0]);
break;
case 77:
this.$= new relacional.relacional($$[$0-2],operador.MENORIGUALQUE,$$[$0]);
break;
case 78:
this.$= new relacional.relacional($$[$0-2],operador.IGUALQUE,$$[$0]);
break;
case 79:
this.$= new relacional.relacional($$[$0-2],operador.DIFERENTEQUE,$$[$0]);
break;
case 80:
this.$= new logica.logica($$[$0-2],operador.AND,$$[$0]);
break;
case 81:
this.$= new logica.logica($$[$0-2],operador.OR,$$[$0]);
break;
case 82:
this.$= new unaria.unaria(operador.NOT,$$[$0]);
break;
case 85:
this.$=new numero.numero(Number($$[$0]),tipo_valor.NUMBER);
break;
case 86:
this.$=new valorLogico.valorLogico("TRUE",tipo_valor.BOOLEAN);
break;
case 87:
this.$=new valorLogico.valorLogico("FALSE",tipo_valor.BOOLEAN);
break;
case 88: case 89:
this.$=new cadena.cadena($$[$0],tipo_valor.STRING);
break;
case 90:
this.$=new identificador.identificador($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{1:[3]},{5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,3]),{8:[1,32]},o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{8:[1,33]},{8:[1,34]},{18:[1,35]},{8:[1,36]},{8:[1,37]},o($Ve,[2,16]),{8:[1,38]},{24:$Vf,28:39,30:40},{18:[1,42]},{18:[1,43]},{18:[1,44]},{18:[1,45]},{38:[1,46]},{62:[1,47]},{24:[1,48]},{18:$Vg,25:$Vh,26:$Vi,33:$Vj},{8:[1,53],15:64,18:$Vk,24:$Vl,34:54,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{24:[2,27]},{24:[2,28]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,11]),o($Ve,[2,12]),{19:[1,65]},o($Ve,$Vt),o($Ve,[2,15]),o($Ve,[2,17]),{8:[2,20],29:[1,66]},o($Vu,[2,22]),o($Vu,$Vv,{31:$Vw,33:$Vx}),{15:64,18:$Vk,24:$Vl,34:69,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:70,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{7:71,23:72,24:[1,74],27:73,35:$V4,36:$V5},{15:64,18:$Vk,24:$Vl,34:75,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{4:76,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{63:[1,77]},{18:[1,78]},{15:64,18:$Vk,19:[1,79],24:$Vl,34:81,55:80,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($Vy,[2,18]),o($Vy,[2,19]),{15:64,18:$Vk,24:$Vl,34:82,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($Ve,[2,61]),{8:[1,83],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{15:64,18:$Vk,24:$Vl,34:99,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VO,[2,90],{18:$Vg,25:[1,100],26:[1,101]}),{15:64,18:$Vk,24:$Vl,34:102,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:103,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VO,[2,85]),o($VO,[2,86]),o($VO,[2,87]),o($VO,[2,88]),o($VO,[2,89]),o($VO,[2,91]),{8:[1,104]},{24:$Vf,30:105},{32:106,57:$VP,58:$VQ,59:$VR,60:$VS},{15:64,18:$Vk,24:$Vl,34:111,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{19:[1,112],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{19:[1,113],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{8:[1,114]},{8:[1,115]},{24:[1,116],28:39,30:40},{33:$Vj},{19:[1,117],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,118],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{18:[1,119]},{19:[1,120],24:$VT,54:121,56:122},o($VO,[2,51]),{19:[1,124],29:[1,125]},o($VU,[2,64],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN}),{8:[2,29],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},o($Ve,[2,62]),{15:64,18:$Vk,24:$Vl,34:126,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:127,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:128,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:129,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:130,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:131,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:132,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:133,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:134,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:135,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:136,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:137,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:138,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:139,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:140,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VO,[2,65]),o($VO,[2,72]),o($VO,[2,73]),o($VV,[2,82],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),{19:[1,141],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},o($Ve,[2,13]),o($Vu,[2,21]),o($Vu,[2,25],{33:[1,142]}),o($VW,[2,56]),o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,59]),o($Vu,[2,24],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN}),{38:[1,143]},{38:[1,144]},{15:64,18:$Vk,24:$Vl,34:145,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{15:64,18:$Vk,24:$Vl,34:146,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($Vu,$Vv,{31:$Vw,33:$Vx,49:[1,147],50:[1,148]}),{38:[1,149]},{51:[1,150]},{15:64,18:$Vk,24:$Vl,34:151,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{31:[1,153],38:[1,152]},{19:[1,154],29:[1,155]},o($VU,[2,54]),{31:[1,156]},o($VO,[2,52]),{15:64,18:$Vk,24:$Vl,34:157,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VX,[2,66],{67:$VB,68:$VC,69:$VD,70:$VE}),o($VX,[2,67],{67:$VB,68:$VC,69:$VD,70:$VE}),o($VY,[2,68],{70:$VE}),o($VY,[2,69],{70:$VE}),o($VY,[2,70],{70:$VE}),o($VO,[2,71]),o($VZ,[2,74],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VZ,[2,75],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VZ,[2,76],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VZ,[2,77],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VZ,[2,78],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VZ,[2,79],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VV,[2,80],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o([8,19,29,31,78,80],[2,81],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),{31:[1,158],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},o($VO,[2,83]),{15:64,18:$Vk,24:$Vl,34:159,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{4:160,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{44:161,45:162,46:$V_,47:$V$},{8:[1,165],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{8:[1,166],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{24:[1,167]},{24:[1,168]},{4:169,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{18:[1,170]},{19:[1,171],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{4:172,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{32:173,57:$VP,58:$VQ,59:$VR,60:$VS},{31:[1,174],38:[1,175]},{24:$VT,56:176},{32:177,57:$VP,58:$VQ,59:$VR,60:$VS},o($VU,[2,63],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN}),{15:64,18:$Vk,24:$Vl,34:178,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($Vu,[2,23],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN}),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,179],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{39:[1,180],45:181,46:$V_,47:$V$},o($V01,[2,38]),{15:64,18:$Vk,24:$Vl,34:182,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{31:[1,183]},{16:184,24:$V11},{16:186,24:$V11},{19:[1,187]},{19:[1,188]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,189],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{15:64,18:$Vk,24:$Vl,34:190,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{8:[1,191]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,192],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{38:[1,193]},{32:194,57:$VP,58:$VQ,59:$VR,60:$VS},{4:195,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($VU,[2,53]),o($VU,[2,55]),o([8,19,29,31,80],[2,84],{65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),o($Ve,[2,30],{40:196,42:198,41:$V21}),o($Ve,[2,36]),o($V01,[2,37]),{31:[1,199],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},{4:200,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{19:[1,201]},{25:$Vh,26:$Vi},{19:[1,202]},{38:[1,203]},{39:[1,204]},o($Ve,[2,45]),{19:[1,205],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},o($Ve,[2,60]),o($Ve,[2,47]),{4:206,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{38:[1,207]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,208],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,31]),{37:[1,209],38:[1,210]},o($Ve,[2,34]),{4:211,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:[1,212],21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{38:[1,213]},{38:[1,214]},{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,46]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,217],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,49]),{18:[1,219]},{4:220,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:[1,221],21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{8:[1,222]},{4:223,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{4:224,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,225],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,226],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,50]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,227],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{15:64,18:$Vk,24:$Vl,34:228,65:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,229],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{8:[1,230]},o($V31,$Vt,{39:$V41,46:$V41,47:$V41}),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,231],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,232],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,43]),o($Ve,[2,44]),o($Ve,[2,48]),{19:[1,233],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,80:$VN},o($Ve,[2,35]),o($V31,$Vt,{39:$V51,46:$V51,47:$V51}),o($Ve,[2,41]),o($Ve,[2,42]),{38:[1,234]},{4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:$V1,21:$V2,22:16,23:17,24:$V3,27:18,35:$V4,36:$V5,37:$V6,39:[1,236],43:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,61:$Vc,64:$Vd},o($Ve,[2,32],{42:198,40:237,41:$V21}),o($Ve,[2,33])],
defaultActions: {28:[2,27],29:[2,28],30:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //***********************EXPRESIONES********************************
const cadena= require('../ArchivosTS/expresiones/cadena');
const valorLogico= require('../ArchivosTS/expresiones/valorLogico');
const numero= require('../ArchivosTS/expresiones/numero');
const aritmetica= require('../ArchivosTS/expresiones/operaciones/aritmetica');
const relacional= require('../ArchivosTS/expresiones/operaciones/relacional');
const logica= require('../ArchivosTS/expresiones/operaciones/logica');
const unaria= require('../ArchivosTS/expresiones/operaciones/unaria');
const identificador= require('../ArchivosTS/expresiones/identificador');
  //***********************INSTRUCCIONES***************************
const imprimir= require('../ArchivosTS/instrucciones/imprimir');
const declaracion= require('../ArchivosTS/instrucciones/declaracion');
const asignacion = require('../ArchivosTS/instrucciones/asignacion');
const instruccionif= require('../ArchivosTS/instrucciones/instruccionif');
const instruccionifelse= require('../ArchivosTS/instrucciones/instruccionifelse');
const instruccionelse= require('../ArchivosTS/instrucciones/instruccionelse');
const instruccionelseif= require('../ArchivosTS/instrucciones/instruccionelseif');
const instruccionswitch= require('../ArchivosTS/instrucciones/instruccionswitch');
const instruccionwhile= require('../ArchivosTS/instrucciones/instruccionwhile');
const incremento_decremento= require('../ArchivosTS/instrucciones/incremento_decremento');
const instrucciondowhile= require('../ArchivosTS/instrucciones/instrucciondowhile');
const graficar= require('../ArchivosTS/instrucciones/graficar');
const instruccionfor= require('../ArchivosTS/instrucciones/instruccionfor');
const instruccionbreak= require('../ArchivosTS/instrucciones/instruccionBreak');
const instruccioncontinue= require('../ArchivosTS/instrucciones/instruccioncontinue');
const instruccionreturn= require('../ArchivosTS/instrucciones/instruccionreturn');
const declaracionfuncion= require('../ArchivosTS/instrucciones/declaracionfuncion');
const llamarfuncion= require('../ArchivosTS/instrucciones/llamarfuncion');
  //*****************************OTROS*********************************
const tipo_valor= require('../ArchivosTS/entorno/tipo').tipo_valor;
const tipo_variable= require('../ArchivosTS/entorno/tipo').tipo_variable;
const tipo_instruccion= require('../ArchivosTS/entorno/tipo').tipo_instruccion;
const operador= require('../ArchivosTS/entorno/tipo').operador;
const variable= require('../ArchivosTS/instrucciones/variable');
const caso= require('../ArchivosTS/instrucciones/caso');
const parametro= require('../ArchivosTS/instrucciones/parametro');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas		
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 64;
break;
case 6:return 57;
break;
case 7:return 58;
break;
case 8:return 59;
break;
case 9:return 82;
break;
case 10:return 83;
break;
case 11:return 60;
break;
case 12:return 'RARRAY';
break;
case 13:return 17;
break;
case 14:return 53;
break;
case 15:return 61;
break;
case 16:return 63;
break;
case 17:return 35;
break;
case 18:return 36;
break;
case 19:return 37;
break;
case 20:return 41;
break;
case 21:return 51;
break;
case 22:return 52;
break;
case 23:return 43;
break;
case 24:return 46;
break;
case 25:return 47;
break;
case 26:return 48;
break;
case 27:return 50;
break;
case 28:return 49;  
break;
case 29:return 66;
break;
case 30:return 65;
break;
case 31:return 67;
break;
case 32:return 68;
break;
case 33:return 70;
break;
case 34:return 69;
break;
case 35:return 25;
break;
case 36:return 26;
break;
case 37:return 71;
break;
case 38:return 72;
break;
case 39:return 73;
break;
case 40:return 74;
break;
case 41:return 75;
break;
case 42:return 76;
break;
case 43:return 77;
break;
case 44:return 78;
break;
case 45:return 79;
break;
case 46:return 80;
break;
case 47:return 31;
break;
case 48:return 62;
break;
case 49:return 29;
break;
case 50:return 8;
break;
case 51:return 33;
break;
case 52:return 'RCORCHETEA';
break;
case 53:return 'RCORCHETEC';
break;
case 54:return 38;
break;
case 55:return 39;
break;
case 56:return 18;
break;
case 57:return 19;
break;
case 58: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85; 
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84; 
break;
case 60:return 81;
break;
case 61:return 24;
break;
case 62:return 5;
break;
case 63: console.error('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:break)/,/^(?:continue)/,/^(?:return)/,/^(?:string)/,/^(?:number)/,/^(?:boolean)/,/^(?:true)/,/^(?:false)/,/^(?:void)/,/^(?:Array)/,/^(?:graficar_ts)/,/^(?:function)/,/^(?:console)/,/^(?:log)/,/^(?:let)/,/^(?:const)/,/^(?:if)/,/^(?:else)/,/^(?:while)/,/^(?:do)/,/^(?:switch)/,/^(?:case)/,/^(?:default)/,/^(?:for)/,/^(?:in)/,/^(?:of)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:'[^\']*')/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ejecutar;
exports.Parser = ejecutar.Parser;
exports.parse = function () { return ejecutar.parse.apply(ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}